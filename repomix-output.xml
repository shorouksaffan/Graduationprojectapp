This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
app/.gitignore
app/build.gradle.kts
app/proguard-rules.pro
app/src/androidTest/java/com/example/brewbuddy/ExampleInstrumentedTest.kt
app/src/main/AndroidManifest.xml
app/src/main/java/com/example/brewbuddy/brewbuddy.kt
app/src/main/java/com/example/brewbuddy/core/data/local/brewbuddyDatabase.kt
app/src/main/java/com/example/brewbuddy/core/data/local/dao/DrinkCacheDao.kt
app/src/main/java/com/example/brewbuddy/core/data/local/dao/FavoriteDao.kt
app/src/main/java/com/example/brewbuddy/core/data/local/dao/OrderDao.kt
app/src/main/java/com/example/brewbuddy/core/data/local/entity/DrinkCacheEntity.kt
app/src/main/java/com/example/brewbuddy/core/data/local/entity/FavoriteEntity.kt
app/src/main/java/com/example/brewbuddy/core/data/local/entity/OrderEntity.kt
app/src/main/java/com/example/brewbuddy/core/data/local/entity/OrderItemEntity.kt
app/src/main/java/com/example/brewbuddy/core/data/local/LocalTypeConverters.kt
app/src/main/java/com/example/brewbuddy/core/data/remote/ApiManager.kt
app/src/main/java/com/example/brewbuddy/core/data/remote/CoffeeApiService.kt
app/src/main/java/com/example/brewbuddy/core/data/remote/dto/CoffeeDto.kt
app/src/main/java/com/example/brewbuddy/core/data/remote/dto/DtoMappers.kt
app/src/main/java/com/example/brewbuddy/core/data/remote/NetworkModule.kt
app/src/main/java/com/example/brewbuddy/core/data/remote/Result.kt
app/src/main/java/com/example/brewbuddy/core/data/repository/DrinkRepository.kt
app/src/main/java/com/example/brewbuddy/core/data/repository/FavoritesRepository.kt
app/src/main/java/com/example/brewbuddy/core/data/repository/impl/DrinkRepositoryImpl.kt
app/src/main/java/com/example/brewbuddy/core/data/repository/impl/FavoritesRepositoryImpl.kt
app/src/main/java/com/example/brewbuddy/core/data/repository/impl/OrdersRepositoryImpl.kt
app/src/main/java/com/example/brewbuddy/core/data/repository/OrdersRepository.kt
app/src/main/java/com/example/brewbuddy/core/data/repository/RepoMappers.kt
app/src/main/java/com/example/brewbuddy/core/di/AppModule.kt
app/src/main/java/com/example/brewbuddy/core/di/RepositoryModule.kt
app/src/main/java/com/example/brewbuddy/core/model/Drink.kt
app/src/main/java/com/example/brewbuddy/core/model/Money.kt
app/src/main/java/com/example/brewbuddy/core/model/Order.kt
app/src/main/java/com/example/brewbuddy/core/model/OrderItem.kt
app/src/main/java/com/example/brewbuddy/core/prefs/UserPrefs.kt
app/src/main/java/com/example/brewbuddy/core/util/DateFormatters.kt
app/src/main/java/com/example/brewbuddy/core/util/DispatchersProvider.kt
app/src/main/java/com/example/brewbuddy/core/util/Extensions.kt
app/src/main/java/com/example/brewbuddy/core/util/PriceCatalog.kt
app/src/main/java/com/example/brewbuddy/feature/Dialog/UserNameDialog.kt
app/src/main/java/com/example/brewbuddy/feature/favorites/FavoritesViewModel.kt
app/src/main/java/com/example/brewbuddy/feature/favorites/ui/adapter/FavoriteAdapter.kt
app/src/main/java/com/example/brewbuddy/feature/favorites/ui/FavoritesFragment.kt
app/src/main/java/com/example/brewbuddy/feature/home/HomeViewModel.kt
app/src/main/java/com/example/brewbuddy/feature/home/ui/adapter/BestSellerView.kt
app/src/main/java/com/example/brewbuddy/feature/home/ui/adapter/RecommendationAdapter.kt
app/src/main/java/com/example/brewbuddy/feature/home/ui/HomeFragment.kt
app/src/main/java/com/example/brewbuddy/feature/menu/MenuUiState.kt
app/src/main/java/com/example/brewbuddy/feature/menu/MenuViewModel.kt
app/src/main/java/com/example/brewbuddy/feature/menu/ui/adapter/DrinkAdapter.kt
app/src/main/java/com/example/brewbuddy/feature/menu/ui/adapter/DrinkDiffCallback.kt
app/src/main/java/com/example/brewbuddy/feature/menu/ui/details/DrinkDetailsFragment.kt
app/src/main/java/com/example/brewbuddy/feature/menu/ui/details/DrinkDetailsUiState.kt
app/src/main/java/com/example/brewbuddy/feature/menu/ui/details/DrinkDetailsViewModel.kt
app/src/main/java/com/example/brewbuddy/feature/menu/ui/MenuFragment.kt
app/src/main/java/com/example/brewbuddy/feature/orders/OrdersViewModel.kt
app/src/main/java/com/example/brewbuddy/feature/orders/ui/adapter/OrderAdapter.kt
app/src/main/java/com/example/brewbuddy/feature/orders/ui/OrdersFragment.kt
app/src/main/java/com/example/brewbuddy/MainActivity.kt
app/src/main/java/com/example/brewbuddy/service/ImageLoader.kt
app/src/main/java/com/example/brewbuddy/theme/Color.kt
app/src/main/java/com/example/brewbuddy/theme/Theme.kt
app/src/main/java/com/example/brewbuddy/theme/Type.kt
app/src/main/res/color/chip_text_color.xml
app/src/main/res/drawable/bottom_nav_bar.xml
app/src/main/res/drawable/bottom_sheet_shape.xml
app/src/main/res/drawable/gold_out_line.xml
app/src/main/res/drawable/ic_arrow.xml
app/src/main/res/drawable/ic_bell.xml
app/src/main/res/drawable/ic_dashboard_black_24dp.xml
app/src/main/res/drawable/ic_home_black_24dp.xml
app/src/main/res/drawable/ic_launcher_background.xml
app/src/main/res/drawable/ic_launcher_foreground.xml
app/src/main/res/drawable/ic_menu_list.xml
app/src/main/res/drawable/ic_notifications_black_24dp.xml
app/src/main/res/drawable/linear_effect_details.xml
app/src/main/res/drawable/linear_effect.xml
app/src/main/res/drawable/outline_assignment_24.xml
app/src/main/res/drawable/outline_award_star_24.xml
app/src/main/res/drawable/outline_backlight_high_off_24.xml
app/src/main/res/drawable/outline_bath_outdoor_24.xml
app/src/main/res/drawable/segmented_container_background.xml
app/src/main/res/drawable/selector_favorite_icon.xml
app/src/main/res/drawable/toggle_widget_background.xml
app/src/main/res/layout/activity_main.xml
app/src/main/res/layout/dialog_user_name.xml
app/src/main/res/layout/fragment_drink_details.xml
app/src/main/res/layout/fragment_favorites.xml
app/src/main/res/layout/fragment_home.xml
app/src/main/res/layout/fragment_item_detail.xml
app/src/main/res/layout/fragment_menu.xml
app/src/main/res/layout/fragment_orders.xml
app/src/main/res/layout/item_coffee.xml
app/src/main/res/layout/item_drink.xml
app/src/main/res/layout/item_favorite.xml
app/src/main/res/layout/item_order.xml
app/src/main/res/layout/item_recommendation.xml
app/src/main/res/layout/layout_empty_state.xml
app/src/main/res/layout/layout_progress.xml
app/src/main/res/menu/bottom_nav_menu.xml
app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
app/src/main/res/navigation/nav_graph.xml
app/src/main/res/values/colors.xml
app/src/main/res/values/ids.xml
app/src/main/res/values/strings.xml
app/src/main/res/values/styles.xml
app/src/main/res/values/themes.xml
app/src/main/res/xml/backup_rules.xml
app/src/main/res/xml/data_extraction_rules.xml
app/src/test/java/com/example/brewbuddy/ExampleUnitTest.kt
build.gradle.kts
code.txt
gradle.properties
gradle/libs.versions.toml
gradle/wrapper/gradle-wrapper.properties
gradlew
gradlew.bat
README.md
settings.gradle.kts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/src/main/java/com/example/brewbuddy/feature/menu/MenuUiState.kt">
package com.example.brewbuddy.feature.menu

import com.example.brewbuddy.core.model.Drink

sealed class MenuUiState {
    object Loading : MenuUiState()
    data class Success(val drinks: List<Drink>) : MenuUiState()
    data class Error(val message: String) : MenuUiState()
    object Empty : MenuUiState()
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/menu/ui/details/DrinkDetailsUiState.kt">
package com.example.brewbuddy.feature.menu.ui.details

import com.example.brewbuddy.core.model.Drink

sealed class DrinkDetailsUiState {
    object Loading : DrinkDetailsUiState()
    data class Success(val drink: Drink, val isFavorite: Boolean) : DrinkDetailsUiState()
    data class Error(val message: String) : DrinkDetailsUiState()
}
</file>

<file path="code.txt">
The following is a digest of the repository "Graduationprojectapp.git".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: Graduationprojectapp.git
Files Analyzed: 116
Total Text Size: 58.96 KB
Estimated Tokens (text only): ~21,737

--- DIRECTORY STRUCTURE ---
Graduationprojectapp.git/
├── app/
│   ├── src/
│   │   ├── androidTest/
│   │   │   └── java/
│   │   │       └── com/
│   │   │           └── example/
│   │   │               └── brewbuddy/
│   │   │                   └── ExampleInstrumentedTest.kt
│   │   ├── main/
│   │   │   ├── java/
│   │   │   │   └── com/
│   │   │   │       └── example/
│   │   │   │           └── brewbuddy/
│   │   │   │               ├── core/
│   │   │   │               │   ├── data/
│   │   │   │               │   │   ├── local/
│   │   │   │               │   │   │   ├── dao/
│   │   │   │               │   │   │   │   ├── DrinkCacheDao.kt
│   │   │   │               │   │   │   │   ├── FavoriteDao.kt
│   │   │   │               │   │   │   │   └── OrderDao.kt
│   │   │   │               │   │   │   ├── entity/
│   │   │   │               │   │   │   │   ├── DrinkCacheEntity.kt
│   │   │   │               │   │   │   │   ├── FavoriteEntity.kt
│   │   │   │               │   │   │   │   ├── OrderEntity.kt
│   │   │   │               │   │   │   │   └── OrderItemEntity.kt
│   │   │   │               │   │   │   ├── brewbuddyDatabase.kt
│   │   │   │               │   │   │   └── LocalTypeConverters.kt
│   │   │   │               │   │   ├── remote/
│   │   │   │               │   │   │   ├── dto/
│   │   │   │               │   │   │   │   ├── CoffeeDto.kt
│   │   │   │               │   │   │   │   └── DtoMappers.kt
│   │   │   │               │   │   │   ├── CoffeeApiService.kt
│   │   │   │               │   │   │   └── NetworkModule.kt
│   │   │   │               │   │   └── repository/
│   │   │   │               │   │       ├── impl/
│   │   │   │               │   │       │   ├── DrinkRepositoryImpl.kt
│   │   │   │               │   │       │   ├── FavoritesRepositoryImpl.kt
│   │   │   │               │   │       │   ├── OrdersRepositoryImpl.kt
│   │   │   │               │   │       │   └── Result.kt
│   │   │   │               │   │       ├── DrinkRepository.kt
│   │   │   │               │   │       ├── FavoritesRepository.kt
│   │   │   │               │   │       ├── OrdersRepository.kt
│   │   │   │               │   │       └── RepoMappers.kt
│   │   │   │               │   ├── di/
│   │   │   │               │   │   ├── AppModule.kt
│   │   │   │               │   │   └── RepositoryModule.kt
│   │   │   │               │   ├── model/
│   │   │   │               │   │   ├── Drink.kt
│   │   │   │               │   │   ├── Money.kt
│   │   │   │               │   │   ├── Order.kt
│   │   │   │               │   │   └── OrderItem.kt
│   │   │   │               │   ├── prefs/
│   │   │   │               │   │   └── UserPrefs.kt
│   │   │   │               │   └── util/
│   │   │   │               │       ├── DateFormatters.kt
│   │   │   │               │       ├── DispatchersProvider.kt
│   │   │   │               │       ├── Extensions.kt
│   │   │   │               │       └── PriceCatalog.kt
│   │   │   │               ├── feature/
│   │   │   │               │   ├── Dialog/
│   │   │   │               │   │   └── UserNameDialog.kt
│   │   │   │               │   ├── favorites/
│   │   │   │               │   │   ├── ui/
│   │   │   │               │   │   │   ├── adapter/
│   │   │   │               │   │   │   │   └── FavoriteAdapter.kt
│   │   │   │               │   │   │   └── FavoritesFragment.kt
│   │   │   │               │   │   └── FavoritesViewModel.kt
│   │   │   │               │   ├── home/
│   │   │   │               │   │   ├── ui/
│   │   │   │               │   │   │   ├── adapter/
│   │   │   │               │   │   │   │   ├── BestSellerView.kt
│   │   │   │               │   │   │   │   └── RecommendationAdapter.kt
│   │   │   │               │   │   │   └── HomeFragment.kt
│   │   │   │               │   │   └── HomeViewModel.kt
│   │   │   │               │   ├── menu/
│   │   │   │               │   │   ├── ui/
│   │   │   │               │   │   │   ├── adapter/
│   │   │   │               │   │   │   │   ├── DrinkAdapter.kt
│   │   │   │               │   │   │   │   └── DrinkDiffCallback.kt
│   │   │   │               │   │   │   ├── details/
│   │   │   │               │   │   │   │   ├── DrinkDetailsFragment.kt
│   │   │   │               │   │   │   │   └── DrinkDetailsViewModel.kt
│   │   │   │               │   │   │   └── MenuFragment.kt
│   │   │   │               │   │   └── MenuViewModel.kt
│   │   │   │               │   └── orders/
│   │   │   │               │       ├── ui/
│   │   │   │               │       │   ├── adapter/
│   │   │   │               │       │   │   └── OrderAdapter.kt
│   │   │   │               │       │   └── OrdersFragment.kt
│   │   │   │               │       └── OrdersViewModel.kt
│   │   │   │               ├── service/
│   │   │   │               │   └── ImageLoader.kt
│   │   │   │               ├── theme/
│   │   │   │               │   ├── Color.kt
│   │   │   │               │   ├── Theme.kt
│   │   │   │               │   └── Type.kt
│   │   │   │               ├── brewbuddy.kt
│   │   │   │               └── MainActivity.kt
│   │   │   ├── res/
│   │   │   │   ├── drawable/
│   │   │   │   │   ├── fav.jpg [binary]
│   │   │   │   │   ├── ic_dashboard_black_24dp.xml
│   │   │   │   │   ├── ic_home_black_24dp.xml
│   │   │   │   │   ├── ic_launcher_background.xml
│   │   │   │   │   ├── ic_launcher_foreground.xml
│   │   │   │   │   ├── ic_notifications_black_24dp.xml
│   │   │   │   │   ├── menu.png [binary]
│   │   │   │   │   ├── order.png [binary]
│   │   │   │   │   ├── outline_assignment_24.xml
│   │   │   │   │   ├── outline_award_star_24.xml
│   │   │   │   │   ├── outline_backlight_high_off_24.xml
│   │   │   │   │   └── outline_bath_outdoor_24.xml
│   │   │   │   ├── layout/
│   │   │   │   │   ├── activity_main.xml
│   │   │   │   │   ├── dialog_user_name.xml
│   │   │   │   │   ├── fragment_drink_details.xml
│   │   │   │   │   ├── fragment_favorites.xml
│   │   │   │   │   ├── fragment_home.xml
│   │   │   │   │   ├── fragment_item_detail.xml
│   │   │   │   │   ├── fragment_menu.xml
│   │   │   │   │   ├── fragment_orders.xml
│   │   │   │   │   ├── item_coffee.xml
│   │   │   │   │   ├── item_drink.xml
│   │   │   │   │   ├── item_favorite.xml
│   │   │   │   │   ├── item_order.xml
│   │   │   │   │   ├── item_recommendation.xml
│   │   │   │   │   ├── layout_empty_state.xml
│   │   │   │   │   └── layout_progress.xml
│   │   │   │   ├── menu/
│   │   │   │   │   └── bottom_nav_menu.xml
│   │   │   │   ├── mipmap-anydpi-v26/
│   │   │   │   │   ├── ic_launcher_round.xml
│   │   │   │   │   └── ic_launcher.xml
│   │   │   │   ├── mipmap-hdpi/
│   │   │   │   │   ├── ic_launcher_round.webp [binary]
│   │   │   │   │   └── ic_launcher.webp [binary]
│   │   │   │   ├── mipmap-mdpi/
│   │   │   │   │   ├── ic_launcher_round.webp [binary]
│   │   │   │   │   └── ic_launcher.webp [binary]
│   │   │   │   ├── mipmap-xhdpi/
│   │   │   │   │   ├── ic_launcher_round.webp [binary]
│   │   │   │   │   └── ic_launcher.webp [binary]
│   │   │   │   ├── mipmap-xxhdpi/
│   │   │   │   │   ├── ic_launcher_round.webp [binary]
│   │   │   │   │   └── ic_launcher.webp [binary]
│   │   │   │   ├── mipmap-xxxhdpi/
│   │   │   │   │   ├── ic_launcher_round.webp [binary]
│   │   │   │   │   └── ic_launcher.webp [binary]
│   │   │   │   ├── navigation/
│   │   │   │   │   └── nav_graph.xml
│   │   │   │   ├── values/
│   │   │   │   │   ├── colors.xml
│   │   │   │   │   ├── ids.xml
│   │   │   │   │   ├── strings.xml
│   │   │   │   │   ├── styles.xml
│   │   │   │   │   └── themes.xml
│   │   │   │   └── xml/
│   │   │   │       ├── backup_rules.xml
│   │   │   │       └── data_extraction_rules.xml
│   │   │   └── AndroidManifest.xml
│   │   └── test/
│   │       └── java/
│   │           └── com/
│   │               └── example/
│   │                   └── brewbuddy/
│   │                       └── ExampleUnitTest.kt
│   ├── build.gradle.kts
│   └── proguard-rules.pro
├── gradle/
│   ├── wrapper/
│   │   └── gradle-wrapper.properties
│   └── libs.versions.toml
├── build.gradle.kts
├── gradle.properties
├── gradlew
├── gradlew.bat [binary]
├── README.md
└── settings.gradle.kts


--- FILE CONTENTS ---
============================================================
FILE: app/src/androidTest/java/com/example/brewbuddy/ExampleInstrumentedTest.kt
============================================================
package com.example.brewbuddy

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.example.brewbuddy", appContext.packageName)
    }
}

============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/local/dao/DrinkCacheDao.kt
============================================================
package com.example.brewbuddy.core.data.local.dao


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/local/dao/FavoriteDao.kt
============================================================
package com.example.brewbuddy.core.data.local.dao


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/local/dao/OrderDao.kt
============================================================
package com.example.brewbuddy.core.data.local.dao



============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/local/entity/DrinkCacheEntity.kt
============================================================
package com.example.brewbuddy.core.data.local.entity


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/local/entity/FavoriteEntity.kt
============================================================
package com.example.brewbuddy.core.data.local.entity


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/local/entity/OrderEntity.kt
============================================================
package com.example.brewbuddy.core.data.local.entity


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/local/entity/OrderItemEntity.kt
============================================================
package com.example.brewbuddy.core.data.local.entity


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/local/brewbuddyDatabase.kt
============================================================
package com.example.brewbuddy.core.data.local


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/local/LocalTypeConverters.kt
============================================================
package com.example.brewbuddy.core.data.local


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/remote/dto/CoffeeDto.kt
============================================================
package com.example.brewbuddy.core.data.remote.dto


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/remote/dto/DtoMappers.kt
============================================================
package com.example.brewbuddy.core.data.remote.dto


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/remote/CoffeeApiService.kt
============================================================
package com.example.brewbuddy.core.data.remote


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/remote/NetworkModule.kt
============================================================
package com.example.brewbuddy.core.data.remote


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/repository/impl/DrinkRepositoryImpl.kt
============================================================
package com.example.brewbuddy.core.data.repository.impl


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/repository/impl/FavoritesRepositoryImpl.kt
============================================================
package com.example.brewbuddy.core.data.repository.impl


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/repository/impl/OrdersRepositoryImpl.kt
============================================================
package com.example.brewbuddy.core.data.repository.impl


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/repository/impl/Result.kt
============================================================
package com.example.brewbuddy.core.data.repository.impl


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/repository/DrinkRepository.kt
============================================================
package com.example.brewbuddy.core.data.repository


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/repository/FavoritesRepository.kt
============================================================
package com.example.brewbuddy.core.data.repository



============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/repository/OrdersRepository.kt
============================================================
package com.example.brewbuddy.core.data.repository



============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/data/repository/RepoMappers.kt
============================================================
package com.example.brewbuddy.core.data.repository

============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/di/AppModule.kt
============================================================
package com.example.brewbuddy.core.di


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/di/RepositoryModule.kt
============================================================
package com.example.brewbuddy.core.di


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/model/Drink.kt
============================================================
package com.example.brewbuddy.core.model



============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/model/Money.kt
============================================================
package com.example.brewbuddy.core.model


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/model/Order.kt
============================================================
package com.example.brewbuddy.core.model


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/model/OrderItem.kt
============================================================
package com.example.brewbuddy.core.model


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/prefs/UserPrefs.kt
============================================================
package com.example.brewbuddy.core.prefs


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/util/DateFormatters.kt
============================================================
package com.example.brewbuddy.core.util


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/util/DispatchersProvider.kt
============================================================
package com.example.mygraduationapp.core.util
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.Dispatchers

interface DispatchersProvider {
    val main: CoroutineDispatcher
    val io: CoroutineDispatcher
    val default: CoroutineDispatcher
}

class DispatchersProviderImpl : DispatchersProvider {
    override val main: CoroutineDispatcher = Dispatchers.Main
    override val io: CoroutineDispatcher = Dispatchers.IO
    override val default: CoroutineDispatcher = Dispatchers.Default
}



============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/util/Extensions.kt
============================================================
package com.example.brewbuddy.core.util


============================================================
FILE: app/src/main/java/com/example/brewbuddy/core/util/PriceCatalog.kt
============================================================
package com.example.brewbuddy.core.util


============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/Dialog/UserNameDialog.kt
============================================================
package com.example.brewbuddy.feature.Dialog



============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/favorites/ui/adapter/FavoriteAdapter.kt
============================================================
package com.example.brewbuddy.feature.favorites.ui.adapter


============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/favorites/ui/FavoritesFragment.kt
============================================================
package com.example.brewbuddy.feature.favorites.ui


============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/favorites/FavoritesViewModel.kt
============================================================
package com.example.brewbuddy.feature.favorites


============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/home/ui/adapter/BestSellerView.kt
============================================================
package com.example.brewbuddy.feature.home.ui.adapter


============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/home/ui/adapter/RecommendationAdapter.kt
============================================================
package com.example.brewbuddy.feature.home.ui.adapter


============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/home/ui/HomeFragment.kt
============================================================
package com.example.brewbuddy.feature.home.ui


============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/home/HomeViewModel.kt
============================================================
package com.example.brewbuddy.feature.home



============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/menu/ui/adapter/DrinkAdapter.kt
============================================================
package com.example.brewbuddy.feature.menu.ui.adapter


============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/menu/ui/adapter/DrinkDiffCallback.kt
============================================================
package com.example.brewbuddy.feature.menu.ui.adapter



============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/menu/ui/details/DrinkDetailsFragment.kt
============================================================
package com.example.brewbuddy.feature.menu.ui.details


============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/menu/ui/details/DrinkDetailsViewModel.kt
============================================================
package com.example.brewbuddy.feature.menu.ui.details


============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/menu/ui/MenuFragment.kt
============================================================
package com.example.brewbuddy.feature.menu.ui


============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/menu/MenuViewModel.kt
============================================================
package com.example.brewbuddy.feature.menu


============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/orders/ui/adapter/OrderAdapter.kt
============================================================
package com.example.brewbuddy.feature.orders.ui.adapter


============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/orders/ui/OrdersFragment.kt
============================================================
package com.example.brewbuddy.feature.orders.ui


============================================================
FILE: app/src/main/java/com/example/brewbuddy/feature/orders/OrdersViewModel.kt
============================================================
package com.example.brewbuddy.feature.orders


============================================================
FILE: app/src/main/java/com/example/brewbuddy/service/ImageLoader.kt
============================================================
package com.example.brewbuddy.service


============================================================
FILE: app/src/main/java/com/example/brewbuddy/theme/Color.kt
============================================================
package com.example.brewbuddy.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

============================================================
FILE: app/src/main/java/com/example/brewbuddy/theme/Theme.kt
============================================================
package com.example.brewbuddy.theme

import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun brewbuddyTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }

        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}

============================================================
FILE: app/src/main/java/com/example/brewbuddy/theme/Type.kt
============================================================
package com.example.brewbuddy.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)

============================================================
FILE: app/src/main/java/com/example/brewbuddy/brewbuddy.kt
============================================================
package com.example.brewbuddy


============================================================
FILE: app/src/main/java/com/example/brewbuddy/MainActivity.kt
============================================================
package com.example.brewbuddy

import androidx.appcompat.app.AppCompatActivity


class MainActivity : AppCompatActivity() {

}

============================================================
FILE: app/src/main/res/drawable/ic_dashboard_black_24dp.xml
============================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24.0"
    android:viewportHeight="24.0">
    <path
        android:fillColor="#FF000000"
        android:pathData="M3,13h8L11,3L3,3v10zM3,21h8v-6L3,15v6zM13,21h8L21,11h-8v10zM13,3v6h8L21,3h-8z" />
</vector>


============================================================
FILE: app/src/main/res/drawable/ic_home_black_24dp.xml
============================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24.0"
    android:viewportHeight="24.0">
    <path
        android:fillColor="#FF000000"
        android:pathData="M10,20v-6h4v6h5v-8h3L12,3 2,12h3v8z" />
</vector>


============================================================
FILE: app/src/main/res/drawable/ic_launcher_background.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>


============================================================
FILE: app/src/main/res/drawable/ic_launcher_foreground.xml
============================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

============================================================
FILE: app/src/main/res/drawable/ic_notifications_black_24dp.xml
============================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24.0"
    android:viewportHeight="24.0">
    <path
        android:fillColor="#FF000000"
        android:pathData="M12,22c1.1,0 2,-0.9 2,-2h-4c0,1.1 0.89,2 2,2zM18,16v-5c0,-3.07 -1.64,-5.64 -4.5,-6.32L13.5,4c0,-0.83 -0.67,-1.5 -1.5,-1.5s-1.5,0.67 -1.5,1.5v0.68C7.63,5.36 6,7.92 6,11v5l-2,2v1h16v-1l-2,-2z" />
</vector>


============================================================
FILE: app/src/main/res/drawable/outline_assignment_24.xml
============================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:tint="#000000" android:viewportHeight="960" android:viewportWidth="960" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M200,840Q167,840 143.5,816.5Q120,793 120,760L120,200Q120,167 143.5,143.5Q167,120 200,120L368,120Q381,84 411.5,62Q442,40 480,40Q518,40 548.5,62Q579,84 592,120L760,120Q793,120 816.5,143.5Q840,167 840,200L840,760Q840,793 816.5,816.5Q793,840 760,840L200,840ZM200,760L760,760Q760,760 760,760Q760,760 760,760L760,200Q760,200 760,200Q760,200 760,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760ZM280,680L560,680L560,600L280,600L280,680ZM280,520L680,520L680,440L280,440L280,520ZM280,360L680,360L680,280L280,280L280,360ZM480,170Q493,170 501.5,161.5Q510,153 510,140Q510,127 501.5,118.5Q493,110 480,110Q467,110 458.5,118.5Q450,127 450,140Q450,153 458.5,161.5Q467,170 480,170ZM200,760Q200,760 200,760Q200,760 200,760L200,200Q200,200 200,200Q200,200 200,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760Z"/>
    
</vector>


============================================================
FILE: app/src/main/res/drawable/outline_award_star_24.xml
============================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="960" android:viewportWidth="960" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M363,650L480,579L597,650L566,517L670,427L533,416L480,290L427,416L290,427L394,517L363,650ZM480,932L346,800L160,800L160,614L28,480L160,346L160,160L346,160L480,28L614,160L800,160L800,346L932,480L800,614L800,800L614,800L480,932ZM480,820L580,720L720,720L720,580L820,480L720,380L720,240L580,240L480,140L380,240L240,240L240,380L140,480L240,580L240,720L380,720L480,820ZM480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Z"/>
    
</vector>


============================================================
FILE: app/src/main/res/drawable/outline_backlight_high_off_24.xml
============================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="960" android:viewportWidth="960" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M40,600L40,520L200,520L200,600L40,600ZM440,280L440,80L520,80L520,280L440,280ZM706,390L650,334L763,221L820,277L706,390ZM760,600L760,520L920,520L920,600L760,600ZM791,905L606,720L280,720L280,600L486,600L55,169L112,112L848,848L791,905Z"/>
    
</vector>


============================================================
FILE: app/src/main/res/drawable/outline_bath_outdoor_24.xml
============================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="960" android:viewportWidth="960" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M240,451L240,544Q220,558 210,572.5Q200,587 200,600Q200,606 201.5,612Q203,618 207,624L240,640L330,640L336,657L380,640L540,640L569,678L676,662L720,600L760,600Q760,600 760,600Q760,600 760,600Q760,587 750,572.5Q740,558 720,544L720,451Q778,480 809,518.5Q840,557 840,600Q840,600 840,600Q840,600 840,600L840,600L880,660L840,780L716,780L720,800L620,840L340,840L330,814L220,840L80,740L80,640L122,619Q121,614 120.5,609.5Q120,605 120,600Q120,557 151,518.5Q182,480 240,451ZM162,723L199,686L160,667L140,677L140,708L162,723ZM235,775L310,757L288,700L270,700L213,757L235,775ZM382,780L503,780L530,726L510,700L392,700L358,714L382,780ZM572,780L608,780L650,763L643,728L598,735L572,780ZM710,720L797,720L814,669L808,660L751,660L710,720ZM270,520Q275,505 277.5,491.5Q280,478 280,462Q280,432 265,410Q250,388 231,363Q212,338 197,307.5Q182,277 182,229Q182,214 183.5,197Q185,180 189,160L270,160Q265,183 263.5,198Q262,213 262,226Q262,263 277.5,287.5Q293,312 311,336Q329,360 344.5,389Q360,418 360,464Q360,478 358,492Q356,506 352,520L270,520ZM430,520Q435,505 437.5,491.5Q440,478 440,462Q440,432 425,410Q410,388 391,363Q372,338 357,307.5Q342,277 342,229Q342,214 343.5,197Q345,180 349,160L430,160Q425,183 423,198Q421,213 421,226Q421,263 436.5,287.5Q452,312 470,336Q488,360 503.5,389Q519,418 519,464Q519,478 517.5,492Q516,506 512,520L430,520ZM590,520Q595,505 597.5,491.5Q600,478 600,462Q600,432 585,410Q570,388 551,363Q532,338 517,307.5Q502,277 502,229Q502,214 503.5,197Q505,180 509,160L590,160Q585,183 583,198Q581,213 581,226Q581,263 596.5,287.5Q612,312 630,336Q648,360 663.5,389Q679,418 679,464Q679,478 677.5,492Q676,506 672,520L590,520Z"/>
    
</vector>


============================================================
FILE: app/src/main/res/layout/activity_main.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

</androidx.constraintlayout.widget.ConstraintLayout>

============================================================
FILE: app/src/main/res/layout/dialog_user_name.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

</androidx.constraintlayout.widget.ConstraintLayout>

============================================================
FILE: app/src/main/res/layout/fragment_drink_details.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

</androidx.constraintlayout.widget.ConstraintLayout>

============================================================
FILE: app/src/main/res/layout/fragment_favorites.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

</androidx.constraintlayout.widget.ConstraintLayout>

============================================================
FILE: app/src/main/res/layout/fragment_home.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

</androidx.constraintlayout.widget.ConstraintLayout>

============================================================
FILE: app/src/main/res/layout/fragment_item_detail.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

</androidx.constraintlayout.widget.ConstraintLayout>

============================================================
FILE: app/src/main/res/layout/fragment_menu.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

</androidx.constraintlayout.widget.ConstraintLayout>

============================================================
FILE: app/src/main/res/layout/fragment_orders.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

</androidx.constraintlayout.widget.ConstraintLayout>

============================================================
FILE: app/src/main/res/layout/item_coffee.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:padding="8dp">

    <ImageView
        android:id="@+id/coffeeImage"
        android:layout_width="80dp"
        android:layout_height="80dp"
        android:scaleType="centerCrop"
        android:contentDescription="@string/coffee_image"
        android:src="@android:drawable/ic_menu_gallery"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"/>

    <TextView
        android:id="@+id/coffeeName"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/latte"
        android:textSize="16sp"
        android:textStyle="bold"
        android:textColor="@color/black"
        app:layout_constraintStart_toEndOf="@id/coffeeImage"
        app:layout_constraintTop_toTopOf="@id/coffeeImage"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/coffeePrice"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/price_4_50"
        android:textSize="14sp"
        android:textColor="@color/gray"
        app:layout_constraintStart_toStartOf="@id/coffeeName"
        app:layout_constraintTop_toBottomOf="@id/coffeeName"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/coffeeIngredients"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/ingredients_milk_coffee"
        android:textSize="12sp"
        android:textColor="@color/gray_light"
        app:layout_constraintStart_toStartOf="@id/coffeeName"
        app:layout_constraintTop_toBottomOf="@id/coffeePrice"
        app:layout_constraintEnd_toEndOf="parent"/>

</androidx.constraintlayout.widget.ConstraintLayout>


============================================================
FILE: app/src/main/res/layout/item_drink.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:padding="8dp">

    <ImageView
        android:id="@+id/drinkImage"
        android:layout_width="match_parent"
        android:layout_height="150dp"
        android:scaleType="centerCrop"
        android:src="@android:drawable/ic_menu_gallery"
        android:contentDescription="@string/drink_image"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/drinkName"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/sample_drink_name"
        android:textSize="16sp"
        android:textStyle="bold"
        android:textColor="@color/black"
        android:layout_marginTop="4dp"
        app:layout_constraintTop_toBottomOf="@id/drinkImage"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/drinkPrice"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/price_4_50"
        android:textSize="14sp"
        android:textColor="@color/gray"
        app:layout_constraintTop_toBottomOf="@id/drinkName"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

</androidx.constraintlayout.widget.ConstraintLayout>


============================================================
FILE: app/src/main/res/layout/item_favorite.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:padding="8dp">

    <ImageView
        android:id="@+id/favImage"
        android:layout_width="80dp"
        android:layout_height="80dp"
        android:scaleType="centerCrop"
        android:src="@android:drawable/ic_menu_gallery"
        android:contentDescription="@string/drink_image"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"/>

    <TextView
        android:id="@+id/favName"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/sample_drink_name"
        android:textSize="16sp"
        android:textStyle="bold"
        android:textColor="@color/black"
        app:layout_constraintStart_toEndOf="@id/favImage"
        app:layout_constraintTop_toTopOf="@id/favImage"
        app:layout_constraintEnd_toStartOf="@id/removeFavorite"/>

    <TextView
        android:id="@+id/favPrice"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/price_4_50"
        android:textSize="14sp"
        android:textColor="@color/gray"
        app:layout_constraintStart_toStartOf="@id/favName"
        app:layout_constraintTop_toBottomOf="@id/favName"
        app:layout_constraintEnd_toEndOf="@id/favName"/>

    <ImageView
        android:id="@+id/removeFavorite"
        android:layout_width="24dp"
        android:layout_height="24dp"
        android:src="@android:drawable/ic_menu_delete"
        android:contentDescription="@string/remove_from_favorites"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"/>

</androidx.constraintlayout.widget.ConstraintLayout>


============================================================
FILE: app/src/main/res/layout/item_order.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:padding="8dp">

    <TextView
        android:id="@+id/orderId"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="Order #1234"
        android:textStyle="bold"
        android:textSize="14sp"
        android:textColor="@color/black"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/orderItems"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="Latte x2, Mocha x1"
        android:textSize="14sp"
        android:textColor="@color/gray"
        android:layout_marginTop="2dp"
        app:layout_constraintTop_toBottomOf="@id/orderId"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/orderDate"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="12 Aug, 14:30"
        android:textSize="12sp"
        android:textColor="@color/gray_light"
        android:layout_marginTop="2dp"
        app:layout_constraintTop_toBottomOf="@id/orderItems"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>
</androidx.constraintlayout.widget.ConstraintLayout>


============================================================
FILE: app/src/main/res/layout/item_recommendation.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="120dp"
    android:layout_height="wrap_content"
    android:padding="4dp">

    <ImageView
        android:id="@+id/recoImage"
        android:layout_width="0dp"
        android:layout_height="100dp"
        android:scaleType="centerCrop"
        android:contentDescription="@string/drink_image"
        android:src="@android:drawable/ic_menu_gallery"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="parent"/>

    <TextView
        android:id="@+id/recoName"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/sample_drink_name"
        android:textSize="14sp"
        android:textStyle="bold"
        android:textColor="@color/black"
        android:layout_marginTop="4dp"
        app:layout_constraintTop_toBottomOf="@id/recoImage"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/recoPrice"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/price_4_50"
        android:textSize="12sp"
        android:textColor="@color/gray"
        app:layout_constraintTop_toBottomOf="@id/recoName"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>
</androidx.constraintlayout.widget.ConstraintLayout>


============================================================
FILE: app/src/main/res/layout/layout_empty_state.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

</androidx.constraintlayout.widget.ConstraintLayout>

============================================================
FILE: app/src/main/res/layout/layout_progress.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

</androidx.constraintlayout.widget.ConstraintLayout>

============================================================
FILE: app/src/main/res/menu/bottom_nav_menu.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android">
   </menu>

============================================================
FILE: app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

============================================================
FILE: app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

============================================================
FILE: app/src/main/res/navigation/nav_graph.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<navigation xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/nav_graph">

</navigation>


============================================================
FILE: app/src/main/res/values/colors.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
    <color name="primary">#FF6F4E37</color>
    <color name="primary_dark">#FF5A3C28</color>
    <color name="gray">#FF9E9E9E</color>
    <color name="gray_light">#FFBDBDBD</color>
    <color name="secondary">#FFD7CCC8</color>
</resources>

============================================================
FILE: app/src/main/res/values/ids.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <item name="btnIncrease" type="id"/>
    <item name="tvTotalPrice" type="id"/>
    <item name="tvItemsCount" type="id"/>
</resources>


============================================================
FILE: app/src/main/res/values/strings.xml
============================================================
<resources>
    <string name="app_name">Mygraduationapp</string>
    <string name="enter_your_name">Enter Your Name</string>
    <string name="save">Save</string>
    <string name="empty_favorites">Empty favorites</string>
    <string name="no_favorites_yet">No favorites yet</string>
    <string name="add_some_drinks_to_favorites">Add some drinks to your favorites</string>
    <string name="drink_image">Drink image</string>
    <string name="remove_from_favorites">Remove from favorites</string>
    <string name="sample_drink_name">Drink</string>
    <string name="description_goes_here">Description goes here...</string>
    <string name="ingredients_milk_coffee">Ingredients: milk, coffee</string>
    <string name="price_4_50">$4.50</string>   <!-- renamed -->
    <string name="quantity_one">1</string>    <!-- renamed -->
    <string name="plus_sign">+</string>       <!-- renamed -->
    <string name="total_4_50">Total: $4.50</string>
    <string name="buy_now">Buy Now</string>
    <string name="favorite">Favorite</string>
    <string name="minus_sign">-</string>      <!-- renamed -->
    <string name="latte">Latte</string>       <!-- renamed -->
    <string name="back">lll</string>
    <string name="coffee_image">uuu</string>
</resources>


============================================================
FILE: app/src/main/res/values/styles.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <!-- Main App Theme -->
    <style name="Theme.BrewBuddy" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <!-- Customize your colors here -->
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorOnPrimary">@color/white</item>
        <item name="colorSecondary">@color/teal_200</item>
        <item name="colorOnSecondary">@color/black</item>
    </style>

</resources>


============================================================
FILE: app/src/main/res/values/themes.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<resources>

</resources>


============================================================
FILE: app/src/main/res/xml/backup_rules.xml
============================================================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

============================================================
FILE: app/src/main/res/xml/data_extraction_rules.xml
============================================================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

============================================================
FILE: app/src/main/AndroidManifest.xml
============================================================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.BrewBuddy">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.BrewBuddy">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>

============================================================
FILE: app/src/test/java/com/example/brewbuddy/ExampleUnitTest.kt
============================================================
package com.example.brewbuddy

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

============================================================
FILE: app/build.gradle.kts
============================================================
plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("org.jetbrains.kotlin.plugin.serialization")
    id("org.jetbrains.kotlin.plugin.compose")
    id("com.google.dagger.hilt.android")
    id("kotlin-kapt")
    id("androidx.navigation.safeargs.kotlin")
}

android {
    namespace = "com.example.brewbuddy"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.example.brewbuddy"
        minSdk = 26
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    buildFeatures {
        viewBinding = true
        dataBinding = true
        compose = true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.14" // ✅ must match Kotlin 2.0.x
    }
}

dependencies {
    // ✅ Jetpack Compose (aligned with Kotlin 2.0.x)
    implementation("androidx.compose.ui:ui:1.7.0")
    implementation("androidx.compose.ui:ui-tooling-preview:1.7.0")
    implementation("androidx.compose.material3:material3:1.2.0")
    implementation("androidx.compose.runtime:runtime-livedata:1.7.0")
    implementation("androidx.activity:activity-compose:1.9.1")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.8.3")
    implementation("androidx.navigation:navigation-compose:2.8.0")
    debugImplementation("androidx.compose.ui:ui-tooling:1.7.0")
    debugImplementation("androidx.compose.ui:ui-test-manifest:1.7.0")

    // AndroidX Core
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.appcompat:appcompat:1.7.0")

    // Material Design
    implementation("com.google.android.material:material:1.12.0")

    // Constraint Layout
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    implementation ("com.github.bumptech.glide:glide:4.16.0")
    kapt ("com.github.bumptech.glide:compiler:4.16.0")
    // Navigation (XML-based)
    implementation("androidx.navigation:navigation-fragment-ktx:2.8.0")
    implementation("androidx.navigation:navigation-ui-ktx:2.8.0")

    // Lifecycle
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:2.8.3")
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.3")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.3")

    // Room
    implementation("androidx.room:room-runtime:2.7.0-alpha06")
    implementation("androidx.room:room-ktx:2.7.0-alpha06")
    kapt("androidx.room:room-compiler:2.7.0-alpha06")

    // Hilt
    implementation("com.google.dagger:hilt-android:2.52")
    kapt("com.google.dagger:hilt-compiler:2.52")
    implementation("androidx.hilt:hilt-navigation-fragment:1.2.0")
    implementation("androidx.hilt:hilt-navigation-compose:1.2.0")

    // Retrofit + Serialization
    implementation("com.squareup.retrofit2:retrofit:2.11.0")
    implementation("com.squareup.retrofit2:converter-gson:2.11.0")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.1")
    implementation("com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.8.0")

    // OkHttp
    implementation("com.squareup.okhttp3:okhttp:4.12.0")
    implementation("com.squareup.okhttp3:logging-interceptor:4.12.0")

    // Glide (for Compose)
    implementation("com.github.bumptech.glide:compose:1.0.0-beta01")

    // Coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1")

    // CardView & RecyclerView
    implementation("androidx.cardview:cardview:1.0.0")
    implementation("androidx.recyclerview:recyclerview:1.3.2")

    // Gson
    implementation("com.google.code.gson:gson:2.11.0")

    // Timber
    implementation("com.jakewharton.timber:timber:5.0.1")

    // Testing
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.2.1")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
    androidTestImplementation("androidx.compose.ui:ui-test-junit4:1.7.0")
}

kapt {
    correctErrorTypes = true
}


============================================================
FILE: app/proguard-rules.pro
============================================================
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

============================================================
FILE: gradle/wrapper/gradle-wrapper.properties
============================================================
#Mon Aug 25 17:39:54 EEST 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists


============================================================
FILE: gradle/libs.versions.toml
============================================================
[versions]
agp = "8.11.1"
kotlin = "2.0.21"
coreKtx = "1.17.0"
junit = "4.13.2"
junitVersion = "1.3.0"
espressoCore = "3.7.0"
lifecycleRuntimeKtx = "2.9.2"
activityCompose = "1.10.1"
composeBom = "2024.09.00"
navigationFragmentKtx = "2.9.3"
navigationUiKtx = "2.9.3"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-material3 = { group = "androidx.compose.material3", name = "material3" }
androidx-navigation-fragment-ktx = { group = "androidx.navigation", name = "navigation-fragment-ktx", version.ref = "navigationFragmentKtx" }
androidx-navigation-ui-ktx = { group = "androidx.navigation", name = "navigation-ui-ktx", version.ref = "navigationUiKtx" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }



============================================================
FILE: build.gradle.kts
============================================================
plugins {
    id("com.android.application") version "8.5.2" apply false
    id("org.jetbrains.kotlin.android") version "2.0.21" apply false
    id("org.jetbrains.kotlin.plugin.serialization") version "2.0.21" apply false
    id("com.google.dagger.hilt.android") version "2.52" apply false
    id("androidx.navigation.safeargs.kotlin") version "2.8.3" apply false
    id("org.jetbrains.kotlin.plugin.compose") version "2.0.21" apply false // ✅ Needed for Compose with Kotlin 2.x
}

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("com.google.dagger:hilt-android-gradle-plugin:2.52")
        classpath("androidx.navigation:navigation-safe-args-gradle-plugin:2.8.3")
    }
}

tasks.register("clean", Delete::class) {
    delete(rootProject.buildDir)
}


============================================================
FILE: gradle.properties
============================================================
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

============================================================
FILE: gradlew
============================================================
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"


============================================================
FILE: README.md
============================================================
# BrewBuddy 
is a mobile application that simulates a modern coffee shop ordering experience. It integrates online data (fetched dynamically from the [Fake Coffee API]) with local storage features to create a hybrid app that works both online and offline.
---
## Branch Strategy

We are following a **Git branching strategy** to manage teamwork:

- **main** → Final stable code  
- **dev** → Shared development branch (where features are merged)  
- **feature/*** → Each team member’s task branch  

---
# Project Structure – BrewBuddy Core 

## core/data/local  
Handles **Room Database** (local storage).  

- **dao/**  
  - `DrinkCacheDao.kt` → Access cached drinks in DB.  
  - `FavoriteDao.kt` → Access favorites in DB.  
  - `OrderDao.kt` → Access orders in DB.  

- **entity/**  
  - `DrinkCacheEntity.kt` → Entity for cached drinks.  
  - `FavoriteEntity.kt` → Entity for saved favorites.  
  - `OrderEntity.kt` → Entity for an order (ID, date, etc.).  
  - `OrderItemEntity.kt` → Entity for items inside an order.  

- `brewbuddyDatabase.kt` → Room database setup (connects DAOs + entities).  
- `LocalTypeConverters.kt` → Converts custom types (lists, objects) for Room.  

---

## core/data/remote  
Handles **API calls** (online data).  

- **dto/**  
  - `CoffeeDto.kt` → Data model for coffee items from API.  
  - `DtoMappers.kt` → Maps API DTOs → app models (`Drink`).  

- `CoffeeApiService.kt` → Retrofit API endpoints (hot/iced coffee).  
- `NetworkModule.kt` → Provides Retrofit instance + API service.  

---

## core/repository  
The **bridge** between Data (API/DB) and UI.  

- **impl/**  
  - `DrinkRepositoryImpl.kt` → Drinks logic (API + cache).  
  - `FavoritesRepositoryImpl.kt` → Favorites logic (local DB).  
  - `OrdersRepositoryImpl.kt` → Orders logic (local DB).  

- `Result.kt` → Wrapper for success/error results.  
- `DrinkRepository.kt` → Contract for drinks data.  
- `FavoritesRepository.kt` → Contract for favorites data.  
- `OrdersRepository.kt` → Contract for orders data.  
- `RepoMappers.kt` → Maps Entities ↔ Models (DB ↔ domain).  

---

## di (Dependency Injection)  
- `AppModule.kt` → Provides app-wide dependencies (Room, Retrofit, etc.).  
- `RepositoryModule.kt` → Provides repositories (DrinkRepo, FavoritesRepo, OrdersRepo).  

---

## model (Domain Models)  
- `Drink.kt` → Domain model for a drink.  
- `Money.kt` → Handles prices/currency.  
- `Order.kt` → Domain model for an order.  
- `OrderItem.kt` → Domain model for an item inside an order.  

---

## prefs (User Preferences)  
- `UserPrefs.kt` → Saves and retrieves user name (SharedPreferences).  

---

## util (Helpers & Utilities)  
- `DateFormatters.kt` → Formats dates/times for orders.  
- `DispatchersProvider.kt` → Provides coroutine dispatchers (IO/Main).  
- `Extensions.kt` → Kotlin extension functions (helper methods).  
- `PriceCatalog.kt` → Static price list for drinks (since API has no price).  
---

## Tasks Division
---
## Project Coordination

- Repository setup, README, branch strategy (`dev` / `feature/*` / `master`), and task distribution were handled by **Shorouk Saffan**.
---
### Task 1: Core
- `core/`

---

### Task 2: Base Layouts by ***Emad Rabie***
- `activity_main.xml`  
- `fragment_home.xml`  
- `fragment_menu.xml`  
- `fragment_orders.xml`  
- `fragment_favorites.xml`  

---

### Task 3: RecyclerView Items by ***Mohamed Ashraf***
- `item_coffee.xml`  
- `item_drink.xml`  
- `item_favorite.xml`  
- `item_order.xml`  
- `item_recommendation.xml`  

---

### Task 4: Extra Layouts->Mariam Mohamed
- `dialog_user_name.xml`  
- `fragment_drink_details.xml`  
- `fragment_item_detail.xml`  
- `layout_empty_state.xml`  
- `layout_progress.xml`  

---

### Task 5: Navigation + Main "Ahmed Hashem"
- `menu/bottom_nav_menu.xml`  
- `navigation/nav_graph.xml`  
- `MainActivity.kt`  

---

### Bahy Mohy - Task 6: Features – Dialog + Menu
- `feature/dialog/`  
- `feature/menu/`  

---

### Task 7: Features – Favorites + Home -> Mohamed Mostafa
- `feature/favourites/`  
- `feature/home/`  

---
### Task 8: Features – Orders + Service
- `feature/order/`  
- `service/`  
- `BrewBuddy.kt`  



============================================================
FILE: settings.gradle.kts
============================================================
pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        maven { url = uri("https://jitpack.io") }
    }
}

rootProject.name = "brewbuddy"
include(":app")
</file>

<file path=".gitignore">
*.iml
.gradle
/local.properties
/.idea/caches
/.idea/libraries
/.idea/modules.xml
/.idea/workspace.xml
/.idea/navEditor.xml
/.idea/assetWizardSettings.xml
.DS_Store
/build
/captures
.externalNativeBuild
.cxx
local.properties
</file>

<file path="app/.gitignore">
/build
</file>

<file path="app/build.gradle.kts">
plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("org.jetbrains.kotlin.plugin.serialization")
    id("org.jetbrains.kotlin.plugin.compose")
    id("com.google.dagger.hilt.android")
    id("kotlin-kapt")
    id("androidx.navigation.safeargs.kotlin")
}

android {
    namespace = "com.example.brewbuddy"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.example.brewbuddy"
        minSdk = 26
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    buildFeatures {
        viewBinding = true
        dataBinding = true
        compose = true
    }

    composeOptions {
        // kotlinCompilerExtensionVersion = "1.5.14" // ✅ must match Kotlin 2.0.x // Removed this line
    }
}

dependencies {
    // ✅ Jetpack Compose (aligned with Kotlin 2.0.x)
    implementation("androidx.compose.ui:ui:1.7.0")
    implementation("androidx.compose.ui:ui-tooling-preview:1.7.0")
    implementation("androidx.compose.material3:material3:1.2.0")
    implementation("androidx.compose.runtime:runtime-livedata:1.7.0")
    implementation("androidx.activity:activity-compose:1.9.1")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.8.3")
    implementation("androidx.navigation:navigation-compose:2.8.0")
    debugImplementation("androidx.compose.ui:ui-tooling:1.7.0")
    debugImplementation("androidx.compose.ui:ui-test-manifest:1.7.0")

    // AndroidX Core
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.appcompat:appcompat:1.7.0")

    // Material Design
    implementation("com.google.android.material:material:1.12.0")

    // Constraint Layout
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    implementation ("com.github.bumptech.glide:glide:4.16.0")
    kapt ("com.github.bumptech.glide:compiler:4.16.0")
    // Navigation (XML-based)
    implementation("androidx.navigation:navigation-fragment-ktx:2.8.0")
    implementation("androidx.navigation:navigation-ui-ktx:2.8.0")

    // Lifecycle
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:2.8.3")
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.3")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.3")

    // Room
    implementation("androidx.room:room-runtime:2.7.0-alpha06")
    implementation("androidx.room:room-ktx:2.7.0-alpha06")
    kapt("androidx.room:room-compiler:2.7.0-alpha06")

    // Hilt
    implementation("com.google.dagger:hilt-android:2.57.1")
    kapt("com.google.dagger:hilt-compiler:2.57.1")
    implementation("androidx.hilt:hilt-navigation-fragment:1.2.0")
    implementation("androidx.hilt:hilt-navigation-compose:1.2.0")

    // Retrofit + Serialization
    implementation("com.squareup.retrofit2:retrofit:3.0.0")
    implementation("com.squareup.retrofit2:converter-gson:3.0.0")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0")
    implementation("com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:1.0.0")

    // OkHttp
    implementation("com.squareup.okhttp3:okhttp:5.1.0")
    implementation("com.squareup.okhttp3:logging-interceptor:5.1.0")

    // Glide (for Compose)
    implementation("com.github.bumptech.glide:compose:1.0.0-beta01")

    // Coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2")

    // CardView & RecyclerView
    implementation("androidx.cardview:cardview:1.0.0")
    implementation("androidx.recyclerview:recyclerview:1.3.2")

    // Gson
    implementation("com.google.code.gson:gson:2.13.1")

    // Timber
    implementation("com.jakewharton.timber:timber:5.0.1")

    // Testing
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.2.1")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
    androidTestImplementation("androidx.compose.ui:ui-test-junit4:1.7.0")
}

kapt {
    correctErrorTypes = true
}
</file>

<file path="app/proguard-rules.pro">
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile
</file>

<file path="app/src/androidTest/java/com/example/brewbuddy/ExampleInstrumentedTest.kt">
package com.example.brewbuddy

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.example.brewbuddy", appContext.packageName)
    }
}
</file>

<file path="app/src/main/AndroidManifest.xml">
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.BrewBuddy">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.BrewBuddy">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
</file>

<file path="app/src/main/java/com/example/brewbuddy/brewbuddy.kt">
package com.example.brewbuddy
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/remote/ApiManager.kt">
package com.example.brewbuddy.core.data.remote

import android.os.Build
import androidx.annotation.RequiresExtension
import org.json.JSONException
import org.json.JSONObject
import retrofit2.HttpException
import java.io.IOException
import java.net.SocketException
import java.net.SocketTimeoutException
import javax.net.ssl.SSLException
import kotlin.coroutines.cancellation.CancellationException

open class ApiException(message: String, val statusCode: Int? = null) : Exception(message)

class InternetConnectionException(message: String = "No internet connection") :
    ApiException(message)

class ApiTimeoutException(message: String = "Request timed out") : ApiException(message)

class CertificateException(message: String = "Invalid certificate") : ApiException(message)

class RequestCancelledException(message: String = "Request cancelled") : ApiException(message)

class DataParsingException(message: String = "Data parsing error") : ApiException(message)

class BadRequestException(message: String = "Bad request", statusCode: Int? = 400) :
    ApiException(message, statusCode)

class UnauthorizedException(message: String = "Unauthorized", statusCode: Int? = 401) :
    ApiException(message, statusCode)

class ForbiddenException(message: String = "Forbidden", statusCode: Int? = 403) :
    ApiException(message, statusCode)

class NotFoundException(message: String = "Not found", statusCode: Int? = 404) :
    ApiException(message, statusCode)

class InternalServerErrorException(
    message: String = "Internal server error",
    statusCode: Int? = 500
) : ApiException(message, statusCode)

class UnknownApiException(message: String = "Unexpected error") : ApiException(message)

object ApiManager {

    @RequiresExtension(extension = Build.VERSION_CODES.S, version = 7)
    suspend fun <T> execute(apiCall: suspend () -> T): Result<T> {
        return try {
            val response = apiCall()
            Result.Success(response)
        } catch (e: SocketException) {
            Result.Failure(InternetConnectionException("No internet connection"))
        } catch (e: SocketTimeoutException) {
            Result.Failure(ApiTimeoutException("Connection timed out"))
        } catch (e: SSLException) {
            Result.Failure(CertificateException("Invalid certificate"))
        } catch (e: CancellationException) {
            Result.Failure(RequestCancelledException("Request cancelled"))
        } catch (e: HttpException) {
            handleHttpException(e)
        } catch (e: IOException) {
            Result.Failure(InternetConnectionException("Connection failed"))
        } catch (e: JSONException) {
            Result.Failure(DataParsingException("Data parsing error"))
        } catch (e: Exception) {
            Result.Failure(UnknownApiException(e.message ?: "Unexpected error"))
        }
    }

    private fun <T> handleHttpException(e: HttpException): Result<T> {
        val code = e.code()
        val errorBodyString = try {
            e.response()?.errorBody()?.string()
        } catch (_: Exception) {
            null
        }

        val errorMessage = extractErrorMessage(errorBodyString)

        return when (code) {
            400 -> Result.Failure(BadRequestException(errorMessage, code))
            401 -> Result.Failure(UnauthorizedException(errorMessage, code))
            403 -> Result.Failure(ForbiddenException(errorMessage, code))
            404 -> Result.Failure(NotFoundException(errorMessage, code))
            500 -> Result.Failure(InternalServerErrorException(errorMessage, code))
            else -> Result.Failure(UnknownApiException("Unexpected error: $code - $errorMessage"))
        }
    }

    private fun extractErrorMessage(body: String?): String {
        if (body.isNullOrBlank()) {
            return "Unexpected server error"
        }

        return try {
            val json = JSONObject(body)
            val message = json.optString("message").takeIf { it.isNotBlank() }
            message ?: "Unexpected server error"
        } catch (ex: Exception) {
            "Unexpected server error"
        }
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/Dialog/UserNameDialog.kt">
package com.example.brewbuddy.feature.Dialog

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.core.widget.addTextChangedListener
import androidx.fragment.app.DialogFragment
import androidx.lifecycle.lifecycleScope
import com.example.brewbuddy.core.prefs.UserPrefs
import com.example.brewbuddy.databinding.DialogUserNameBinding
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.launch
import javax.inject.Inject

@AndroidEntryPoint
class UserNameDialog : DialogFragment() {

    private var _binding: DialogUserNameBinding? = null
    private val binding get() = _binding!!

    @Inject
    lateinit var userPrefs: UserPrefs

    companion object {
        const val KEY_USER_NAME = "user_name"
        fun newInstance(): UserNameDialog = UserNameDialog()
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = DialogUserNameBinding.inflate(inflater, container, false)

//        // Start disabled until user types something valid
//        binding.btnContinue.isEnabled = false

//        // Enable button only when input is not blank
//        binding.etUserName.addTextChangedListener { editable ->
//            binding.btnContinue.isEnabled = !editable.isNullOrBlank()
//        }

//        binding.btnContinue.setOnClickListener {
//            val name = binding.etUserName.text?.toString()?.trim().orEmpty()
//            if (name.isNotEmpty()) {
//                // Save using lifecycleScope for coroutine context
//                lifecycleScope.launch {
//                    userPrefs.saveData(KEY_USER_NAME, name)
//                    dismiss()
//                }
//            }
//        }

        return binding.root
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/home/ui/adapter/BestSellerView.kt">
package com.example.brewbuddy.feature.home.ui.adapter
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/menu/MenuViewModel.kt">
package com.example.brewbuddy.feature.menu

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.brewbuddy.core.data.remote.Result
import com.example.brewbuddy.core.data.repository.DrinkRepository
import com.example.brewbuddy.core.model.Drink
import com.example.mygraduationapp.core.util.DispatchersProvider
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharedFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asSharedFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class MenuViewModel @Inject constructor(
    private val repository: DrinkRepository,
    private val dispatcher: DispatchersProvider
) : ViewModel() {

    private val _uiState = MutableStateFlow<MenuUiState>(MenuUiState.Loading)
    val uiState: StateFlow<MenuUiState> = _uiState.asStateFlow()

    private val _events = MutableSharedFlow<MenuEvent>()
    val events: SharedFlow<MenuEvent> = _events.asSharedFlow()

    // All drinks fetched from repo
    private var allDrinks: List<Drink> = emptyList()

    // Current category selection
    enum class Category { ALL, HOT, COLD }

    private var currentCategory: Category = Category.ALL

    fun loadMenu() {
        viewModelScope.launch(dispatcher.io) {
            _uiState.emit(MenuUiState.Loading)
            try {
                val hot = repository.getHotDrinks().first()
                val cold = repository.getColdDrinks().first()

                if (hot is Result.Success && cold is Result.Success) {
                    allDrinks = hot.data + cold.data
                    if (allDrinks.isEmpty()) {
                        _uiState.emit(MenuUiState.Empty)
                    } else {
                        _uiState.emit(MenuUiState.Success(allDrinks))
                    }
                } else {
                    _uiState.emit(MenuUiState.Error("Failed to load drinks"))
                }
            } catch (e: Exception) {
                _uiState.emit(MenuUiState.Error(e.message ?: "Unknown error"))
                _events.emit(MenuEvent.ShowSnackBar("Error loading menu"))
            }
        }
    }

    fun filterByCategory(category: Category) {
        currentCategory = category
        val filtered = when (category) {
            Category.HOT -> allDrinks.filter { it.isHot }
            Category.COLD -> allDrinks.filter { !it.isHot }
            Category.ALL -> allDrinks
        }
        emitFiltered(filtered)
    }

    fun onQueryChanged(query: String) {
        val baseList = when (currentCategory) {
            Category.HOT -> allDrinks.filter { it.isHot }
            Category.COLD -> allDrinks.filter { !it.isHot }
            Category.ALL -> allDrinks
        }
        val filtered = baseList.filter { it.name.contains(query, ignoreCase = true) }
        emitFiltered(filtered)
    }

    private fun emitFiltered(list: List<Drink>) {
        viewModelScope.launch {
            if (list.isEmpty()) {
                _uiState.emit(MenuUiState.Empty)
            } else {
                _uiState.emit(MenuUiState.Success(list))
            }
        }
    }
}

// --- One-time Events ---
sealed class MenuEvent {
    data class ShowSnackBar(val message: String) : MenuEvent()
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/menu/ui/adapter/DrinkAdapter.kt">
package com.example.brewbuddy.feature.menu.ui.adapter

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.brewbuddy.core.model.Drink
import com.example.brewbuddy.core.util.PriceCatalog
import com.example.brewbuddy.databinding.ItemDrinkBinding

class DrinkAdapter(
    private val onClick: (Drink) -> Unit
) : ListAdapter<Drink, DrinkAdapter.DrinkViewHolder>(DrinkDiffCallback()) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): DrinkViewHolder {
        val binding = ItemDrinkBinding.inflate(
            LayoutInflater.from(parent.context), parent, false
        )
        return DrinkViewHolder(binding)
    }

    override fun onBindViewHolder(holder: DrinkViewHolder, position: Int) {
        holder.bind(getItem(position))
    }

    inner class DrinkViewHolder(private val binding: ItemDrinkBinding) :
        RecyclerView.ViewHolder(binding.root) {
        fun bind(drink: Drink) {
            binding.drinkName.text = drink.name
            binding.drinkPrice.text =
                PriceCatalog.getPriceForDrink(drink.id.toString()).toString()

            Glide.with(binding.root.context)
                .load(drink.imageUrl)
                .into(binding.drinkImage)

            binding.root.setOnClickListener { onClick(drink) }
        }
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/menu/ui/adapter/DrinkDiffCallback.kt">
package com.example.brewbuddy.feature.menu.ui.adapter

import androidx.recyclerview.widget.DiffUtil
import com.example.brewbuddy.core.model.Drink

class DrinkDiffCallback : DiffUtil.ItemCallback<Drink>() {
    override fun areItemsTheSame(
        oldItem: Drink,
        newItem: Drink
    ): Boolean = oldItem.id == newItem.id

    override fun areContentsTheSame(
        oldItem: Drink,
        newItem: Drink
    ): Boolean = oldItem == newItem
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/menu/ui/details/DrinkDetailsFragment.kt">
package com.example.brewbuddy.feature.menu.ui.details

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import com.example.brewbuddy.databinding.FragmentDrinkDetailsBinding
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.launch

@AndroidEntryPoint
class DrinkDetailsFragment : Fragment() {
    private var _binding: FragmentDrinkDetailsBinding? = null
    private val binding get() = _binding!!

    private val viewModel: DrinkDetailsViewModel by viewModels()

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        _binding = FragmentDrinkDetailsBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
//        binding.favoriteToggle.setOnClickListener {
//            viewModel.toogleFavorite()
//        }

        observeUiState()

        // Tell the ViewModel to load the data now that the view is ready.
        viewModel.loadDrinkDetails()
    }

    private fun observeUiState() {
        viewLifecycleOwner.lifecycleScope.launch {
            viewModel.uiState.collect { state ->
//                binding.progress.visibility = state is DrinkDetailsUiState.Loading
//                binding.content.visibility = state is DrinkDetailsUiState.Success
//                binding.error.visibility = state is DrinkDetailsUiState.Error

                when (state) {
                    is DrinkDetailsUiState.Success -> {
                        val drink = state.drink
//                        binding.drinkName.text = drink.name
//                        binding.drinkDescription.text = drink.description
//                        binding.drinkIngredients.text = "Ingredients: ${drink.ingredientsText}"
//                        binding.drinkPrice.text = drink.price.formatted()
//                        binding.favoriteToggle.isChecked = state.isFavorite
//
//                        Glide.with(requireContext())
//                            .load(drink.imageUrl)
//                            .into(binding.drinkImage)
                    }

                    is DrinkDetailsUiState.Error -> {
//                        binding.tvError.text = state.message
                    }

                    DrinkDetailsUiState.Loading -> {
                        // Handled by visibility toggle
                    }
                }
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        _binding = null
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/menu/ui/details/DrinkDetailsViewModel.kt">
package com.example.brewbuddy.feature.menu.ui.details

import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.brewbuddy.core.data.repository.DrinkRepository
import com.example.brewbuddy.core.data.repository.FavoritesRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import jakarta.inject.Inject
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

@HiltViewModel
class DrinkDetailsViewModel @Inject constructor(
    private val drinkRepository: DrinkRepository,
    private val favoritesRepository: FavoritesRepository,
    savedStateHandle: SavedStateHandle
) : ViewModel() {
    private val _uiState = MutableStateFlow<DrinkDetailsUiState>(DrinkDetailsUiState.Loading)
    val uiState: StateFlow<DrinkDetailsUiState> = _uiState.asStateFlow()

    private val drinkId: Int = checkNotNull(savedStateHandle["drinkId"])

    fun loadDrinkDetails() {
        viewModelScope.launch {
            _uiState.emit(DrinkDetailsUiState.Loading)
            try {
                val drink = drinkRepository.getDrinkById(drinkId)
                if (drink != null) {
                    val isFavorite = favoritesRepository.isFavorite(drinkId)
                    _uiState.emit(DrinkDetailsUiState.Success(drink, isFavorite))
                } else {
                    _uiState.emit(DrinkDetailsUiState.Error("Drink not found"))
                }
            } catch (e: Exception) {
                _uiState.emit(DrinkDetailsUiState.Error(e.message ?: "Unknown error"))
            }
        }
    }

    fun toogleFavorite() {
        viewModelScope.launch {
            val currentUiState = _uiState.value
            if (currentUiState is DrinkDetailsUiState.Success) {
                if (currentUiState.isFavorite)
                    favoritesRepository.removeFromFavorites(drinkId)
                else
                    favoritesRepository.addToFavorites(drinkId)
                _uiState.emit(currentUiState.copy(isFavorite = !currentUiState.isFavorite))
            }
        }
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/menu/ui/MenuFragment.kt">
package com.example.brewbuddy.feature.menu.ui

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.core.view.isVisible
import androidx.core.widget.addTextChangedListener
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import androidx.navigation.fragment.findNavController
import com.example.brewbuddy.databinding.FragmentMenuBinding
import com.example.brewbuddy.feature.menu.MenuUiState
import com.example.brewbuddy.feature.menu.MenuViewModel
import com.example.brewbuddy.feature.menu.ui.adapter.DrinkAdapter
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.launch

@AndroidEntryPoint
class MenuFragment : Fragment() {
    private var _binding: FragmentMenuBinding? = null
    private val binding get() = _binding!!

    private val viewModel: MenuViewModel by viewModels()
    private lateinit var adapter: DrinkAdapter

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentMenuBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        setupRecyclerView()
        setupSearch()
        setupCategoryChips()
        observeUiState()

        viewModel.loadMenu()
    }

    private fun setupRecyclerView() {
        adapter = DrinkAdapter { drink ->
            val action = MenuFragmentDirections.actionMenuFragmentToDrinkDetailsFragment(drink.id)
            findNavController().navigate(action)
        }
        binding.rvMenu.adapter = adapter
    }

    private fun setupSearch() {
        binding.etSearch.addTextChangedListener { text ->
            viewModel.onQueryChanged(text.toString())
        }
    }

    private fun setupCategoryChips() {
        binding.chipHot.setOnClickListener {
            viewModel.filterByCategory(MenuViewModel.Category.HOT)
        }
        binding.chipIced.setOnClickListener {
            viewModel.filterByCategory(MenuViewModel.Category.COLD)
        }
    }

    private fun observeUiState() {
        viewLifecycleOwner.lifecycleScope.launch {
            repeatOnLifecycle(Lifecycle.State.STARTED) {
                viewModel.uiState.collect { state ->
                    binding.progress.isVisible = state is MenuUiState.Loading
//                    binding.emptyState.isVisible = state is MenuUiState.Empty

                    when (state) {
                        is MenuUiState.Success -> {
                            adapter.submitList(state.drinks)
                        }

                        is MenuUiState.Error -> {
                            adapter.submitList(emptyList())
//                            binding.emptyState.isVisible = true
                            // collect events to show Snackbar if you want
                        }

                        MenuUiState.Loading,
                        MenuUiState.Empty -> {
                            adapter.submitList(emptyList())
                        }
                    }
                }
            }
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/orders/OrdersViewModel.kt">
package com.example.brewbuddy.feature.orders
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/orders/ui/adapter/OrderAdapter.kt">
package com.example.brewbuddy.feature.orders.ui.adapter
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/orders/ui/OrdersFragment.kt">
package com.example.brewbuddy.feature.orders.ui
</file>

<file path="app/src/main/java/com/example/brewbuddy/MainActivity.kt">
package com.example.brewbuddy

import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {}
</file>

<file path="app/src/main/java/com/example/brewbuddy/service/ImageLoader.kt">
package com.example.brewbuddy.service
</file>

<file path="app/src/main/java/com/example/brewbuddy/theme/Color.kt">
package com.example.brewbuddy.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)
</file>

<file path="app/src/main/java/com/example/brewbuddy/theme/Theme.kt">
package com.example.brewbuddy.theme

import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun brewbuddyTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }

        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/theme/Type.kt">
package com.example.brewbuddy.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)
</file>

<file path="app/src/main/res/color/chip_text_color.xml">
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:color="@color/soft_beige" android:state_checked="true" />
    <item android:color="@color/dark_copper" android:state_checked="false" />
</selector>
</file>

<file path="app/src/main/res/drawable/bottom_nav_bar.xml">
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item>
        <shape android:shape="rectangle">
            <solid android:color="@color/dark_copper" />
            <corners android:topLeftRadius="32dp" android:topRightRadius="32dp" />
            <padding android:bottom="0dp" android:left="0dp" android:right="0dp" android:top="0dp" />
            />
        </shape>
    </item>
</selector>
</file>

<file path="app/src/main/res/drawable/bottom_sheet_shape.xml">
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item>
        <shape android:shape="rectangle">
            <stroke android:width="2dp" android:color="@color/dark_copper" />
            <solid android:color="@color/soft_beige" />
            <corners android:topLeftRadius="50dp" android:topRightRadius="50dp" />
        </shape>
    </item>
</selector>
</file>

<file path="app/src/main/res/drawable/gold_out_line.xml">
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <corners android:radius="2dp" />
    <solid android:color="#80000000" />
    <stroke
        android:width="2dp"
        android:color="@color/dark_copper" />
</shape>
</file>

<file path="app/src/main/res/drawable/ic_arrow.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="17dp"
    android:height="16dp"
    android:viewportWidth="17"
    android:viewportHeight="16">
    <path
        android:pathData="M2.83 8h11.34"
        android:strokeWidth="2"
        android:strokeColor="#FFFCF2D9"
        android:strokeLineCap="round"
        android:strokeLineJoin="round" />
    <path
        android:pathData="M9.2 3.33L14.18 8 9.2 12.67"
        android:strokeWidth="2"
        android:strokeColor="#FFFCF2D9"
        android:strokeLineCap="round"
        android:strokeLineJoin="round" />
</vector>
</file>

<file path="app/src/main/res/drawable/ic_bell.xml">
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item >
        <vector android:width="25dp" android:height="34dp" android:viewportWidth="25" android:viewportHeight="34">
            <path android:fillColor="#FFF8E3B6" android:pathData="M0 0H25V34H0z" />
            <path android:fillColor="#FF834D1E" android:pathData="M12.5 28.8c0.44 0 0.86-0.17 1.19-0.46 0.32-0.29 0.54-0.68 0.6-1.12h-3.65c0.06 0.45 0.29 0.85 0.63 1.14 0.34 0.3 0.78 0.45 1.23 0.45Z" />
            <path android:fillColor="#FF834D1E" android:pathData="M22.81 24.53l-0.23-0.2c-0.67-0.6-1.26-1.28-1.75-2.04-0.53-1.04-0.85-2.17-0.93-3.34v-3.43c0-0.42-0.04-0.83-0.12-1.24-1.17-0.24-2.23-0.88-2.99-1.82-0.75-0.93-1.17-2.1-1.16-3.3V8.74c-0.73-0.36-1.5-0.6-2.31-0.7V7.16c0-0.25-0.1-0.48-0.27-0.66-0.18-0.17-0.41-0.27-0.66-0.27-0.24 0-0.48 0.1-0.65 0.27-0.18 0.18-0.27 0.41-0.27 0.66v0.9c-1.8 0.26-3.44 1.16-4.63 2.53C5.65 11.96 5 13.7 5.01 15.52v3.43c-0.09 1.17-0.4 2.3-0.94 3.34-0.48 0.75-1.06 1.44-1.72 2.04l-0.23 0.2v1.96h20.7v-1.96Z" />
            <path android:fillColor="#FFFB452D" android:pathData="M20.83 12.64c1.92 0 3.48-1.56 3.48-3.47 0-1.92-1.56-3.48-3.48-3.48-1.91 0-3.47 1.56-3.47 3.48 0 1.91 1.56 3.47 3.47 3.47Z" />
        </vector>
    </item>
</selector>
</file>

<file path="app/src/main/res/drawable/ic_dashboard_black_24dp.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24.0"
    android:viewportHeight="24.0">
    <path
        android:fillColor="#FF000000"
        android:pathData="M3,13h8L11,3L3,3v10zM3,21h8v-6L3,15v6zM13,21h8L21,11h-8v10zM13,3v6h8L21,3h-8z" />
</vector>
</file>

<file path="app/src/main/res/drawable/ic_home_black_24dp.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24.0"
    android:viewportHeight="24.0">
    <path
        android:fillColor="#FF000000"
        android:pathData="M10,20v-6h4v6h5v-8h3L12,3 2,12h3v8z" />
</vector>
</file>

<file path="app/src/main/res/drawable/ic_launcher_background.xml">
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>
</file>

<file path="app/src/main/res/drawable/ic_launcher_foreground.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>
</file>

<file path="app/src/main/res/drawable/ic_menu_list.xml">
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:state_selected="false">
        <vector android:width="37dp" android:height="37dp" android:viewportWidth="37" android:viewportHeight="37">
            <path android:pathData="M30.83 9.25H4.63" android:strokeWidth="2.3" android:strokeColor="#FF834D1E" android:strokeLineCap="round" />
            <path android:pathData="M30.83 16.96H4.63" android:strokeWidth="2.3" android:strokeColor="#FF834D1E" android:strokeLineCap="round" />
            <path android:pathData="M15.42 24.67H4.62" android:strokeWidth="2.3" android:strokeColor="#FF834D1E" android:strokeLineCap="round" />
            <path android:pathData="M21.58 23.13l5.4 4.62 5.4-4.63" android:strokeWidth="2.3" android:strokeColor="#FF834D1E" android:strokeLineCap="round" android:strokeLineJoin="round" />
        </vector>
    </item>
    <item android:state_selected="true">
        <vector android:width="37dp" android:height="37dp" android:viewportWidth="37" android:viewportHeight="37">
            <path android:fillColor="#FF834D1E" android:fillType="evenOdd" android:pathData="M3.47 9.25c0-0.64 0.52-1.16 1.15-1.16h26.21C31.47 8.1 32 8.61 32 9.25c0 0.64-0.52 1.16-1.16 1.16H4.63c-0.64 0-1.16-0.52-1.16-1.16Zm0 7.7c0-0.63 0.52-1.15 1.15-1.15h26.21c0.64 0 1.16 0.52 1.16 1.16 0 0.64-0.52 1.15-1.16 1.15H4.63c-0.64 0-1.16-0.51-1.16-1.15Zm22.76 5.3c0.43-0.37 1.07-0.37 1.5 0l5.4 4.62c0.48 0.42 0.54 1.15 0.12 1.63-0.41 0.49-1.14 0.54-1.63 0.13l-4.64-3.98-4.64 3.98c-0.49 0.41-1.22 0.36-1.63-0.13-0.42-0.48-0.36-1.21 0.12-1.63l5.4-4.62ZM3.47 24.67c0-0.64 0.52-1.16 1.15-1.16h12.34c0.64 0 1.15 0.52 1.15 1.16 0 0.64-0.51 1.15-1.15 1.15H4.62c-0.63 0-1.15-0.51-1.15-1.15Z" />
        </vector>
    </item>
</selector>
</file>

<file path="app/src/main/res/drawable/ic_notifications_black_24dp.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24.0"
    android:viewportHeight="24.0">
    <path
        android:fillColor="#FF000000"
        android:pathData="M12,22c1.1,0 2,-0.9 2,-2h-4c0,1.1 0.89,2 2,2zM18,16v-5c0,-3.07 -1.64,-5.64 -4.5,-6.32L13.5,4c0,-0.83 -0.67,-1.5 -1.5,-1.5s-1.5,0.67 -1.5,1.5v0.68C7.63,5.36 6,7.92 6,11v5l-2,2v1h16v-1l-2,-2z" />
</vector>
</file>

<file path="app/src/main/res/drawable/linear_effect_details.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="390dp"
    android:height="545dp"
    android:viewportWidth="390"
    android:viewportHeight="545">
    <path android:pathData="M0 0h390v545H0V0Z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="195"
                android:endY="545"
                android:startX="195"
                android:startY="0"
                android:type="linear">
                <item
                    android:color="#00FCF2D9"
                    android:offset="0" />
                <item
                    android:color="#FFFCF2D9"
                    android:offset="1" />
            </gradient>
        </aapt:attr>
    </path>
</vector>
</file>

<file path="app/src/main/res/drawable/linear_effect.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="220dp"
    android:height="162dp"
    android:viewportWidth="220"
    android:viewportHeight="162">

    <path android:pathData="M0 20C0 8.95 8.95 0 20 0h200v162H20c-11.05 0-20-8.95-20-20V20Z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="220"
                android:endY="81"
                android:startX="0"
                android:startY="81"
                android:type="linear">
                <item android:color="#CCAF950C" android:offset="0"/>   <!-- left side, semi-opaque -->
                <item android:color="#00FFFFFF" android:offset="1"/>   <!-- right side fully transparent -->
            </gradient>
        </aapt:attr>
    </path>
</vector>
</file>

<file path="app/src/main/res/drawable/outline_assignment_24.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:tint="#000000" android:viewportHeight="960" android:viewportWidth="960" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M200,840Q167,840 143.5,816.5Q120,793 120,760L120,200Q120,167 143.5,143.5Q167,120 200,120L368,120Q381,84 411.5,62Q442,40 480,40Q518,40 548.5,62Q579,84 592,120L760,120Q793,120 816.5,143.5Q840,167 840,200L840,760Q840,793 816.5,816.5Q793,840 760,840L200,840ZM200,760L760,760Q760,760 760,760Q760,760 760,760L760,200Q760,200 760,200Q760,200 760,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760ZM280,680L560,680L560,600L280,600L280,680ZM280,520L680,520L680,440L280,440L280,520ZM280,360L680,360L680,280L280,280L280,360ZM480,170Q493,170 501.5,161.5Q510,153 510,140Q510,127 501.5,118.5Q493,110 480,110Q467,110 458.5,118.5Q450,127 450,140Q450,153 458.5,161.5Q467,170 480,170ZM200,760Q200,760 200,760Q200,760 200,760L200,200Q200,200 200,200Q200,200 200,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760Z"/>
    
</vector>
</file>

<file path="app/src/main/res/drawable/outline_award_star_24.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="960" android:viewportWidth="960" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M363,650L480,579L597,650L566,517L670,427L533,416L480,290L427,416L290,427L394,517L363,650ZM480,932L346,800L160,800L160,614L28,480L160,346L160,160L346,160L480,28L614,160L800,160L800,346L932,480L800,614L800,800L614,800L480,932ZM480,820L580,720L720,720L720,580L820,480L720,380L720,240L580,240L480,140L380,240L240,240L240,380L140,480L240,580L240,720L380,720L480,820ZM480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Z"/>
    
</vector>
</file>

<file path="app/src/main/res/drawable/outline_backlight_high_off_24.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="960" android:viewportWidth="960" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M40,600L40,520L200,520L200,600L40,600ZM440,280L440,80L520,80L520,280L440,280ZM706,390L650,334L763,221L820,277L706,390ZM760,600L760,520L920,520L920,600L760,600ZM791,905L606,720L280,720L280,600L486,600L55,169L112,112L848,848L791,905Z"/>
    
</vector>
</file>

<file path="app/src/main/res/drawable/outline_bath_outdoor_24.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="960" android:viewportWidth="960" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M240,451L240,544Q220,558 210,572.5Q200,587 200,600Q200,606 201.5,612Q203,618 207,624L240,640L330,640L336,657L380,640L540,640L569,678L676,662L720,600L760,600Q760,600 760,600Q760,600 760,600Q760,587 750,572.5Q740,558 720,544L720,451Q778,480 809,518.5Q840,557 840,600Q840,600 840,600Q840,600 840,600L840,600L880,660L840,780L716,780L720,800L620,840L340,840L330,814L220,840L80,740L80,640L122,619Q121,614 120.5,609.5Q120,605 120,600Q120,557 151,518.5Q182,480 240,451ZM162,723L199,686L160,667L140,677L140,708L162,723ZM235,775L310,757L288,700L270,700L213,757L235,775ZM382,780L503,780L530,726L510,700L392,700L358,714L382,780ZM572,780L608,780L650,763L643,728L598,735L572,780ZM710,720L797,720L814,669L808,660L751,660L710,720ZM270,520Q275,505 277.5,491.5Q280,478 280,462Q280,432 265,410Q250,388 231,363Q212,338 197,307.5Q182,277 182,229Q182,214 183.5,197Q185,180 189,160L270,160Q265,183 263.5,198Q262,213 262,226Q262,263 277.5,287.5Q293,312 311,336Q329,360 344.5,389Q360,418 360,464Q360,478 358,492Q356,506 352,520L270,520ZM430,520Q435,505 437.5,491.5Q440,478 440,462Q440,432 425,410Q410,388 391,363Q372,338 357,307.5Q342,277 342,229Q342,214 343.5,197Q345,180 349,160L430,160Q425,183 423,198Q421,213 421,226Q421,263 436.5,287.5Q452,312 470,336Q488,360 503.5,389Q519,418 519,464Q519,478 517.5,492Q516,506 512,520L430,520ZM590,520Q595,505 597.5,491.5Q600,478 600,462Q600,432 585,410Q570,388 551,363Q532,338 517,307.5Q502,277 502,229Q502,214 503.5,197Q505,180 509,160L590,160Q585,183 583,198Q581,213 581,226Q581,263 596.5,287.5Q612,312 630,336Q648,360 663.5,389Q679,418 679,464Q679,478 677.5,492Q676,506 672,520L590,520Z"/>
    
</vector>
</file>

<file path="app/src/main/res/drawable/segmented_container_background.xml">
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="@color/soft_beige" />
    <corners android:radius="24dp" />
    <stroke
        android:width="1dp"
        android:color="@color/dark_copper" />
</shape>
</file>

<file path="app/src/main/res/drawable/selector_favorite_icon.xml">
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="@drawable/ic_favourite_filled" android:state_selected="true" />
    <item android:drawable="@drawable/ic_favourite" />
</selector>
</file>

<file path="app/src/main/res/drawable/toggle_widget_background.xml">
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="@color/dark_copper" android:state_checked="true"  />
    <item android:drawable="@color/soft_beige" android:state_pressed="true" />
    <item android:drawable="@color/soft_beige" />
</selector>
</file>

<file path="app/src/main/res/layout/dialog_user_name.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_item_detail.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/layout_empty_state.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/layout_progress.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/menu/bottom_nav_menu.xml">
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android">
   </menu>
</file>

<file path="app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml">
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>
</file>

<file path="app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml">
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>
</file>

<file path="app/src/main/res/values/themes.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>

</resources>
</file>

<file path="app/src/main/res/xml/backup_rules.xml">
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>
</file>

<file path="app/src/main/res/xml/data_extraction_rules.xml">
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>
</file>

<file path="app/src/test/java/com/example/brewbuddy/ExampleUnitTest.kt">
package com.example.brewbuddy

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}
</file>

<file path="build.gradle.kts">
plugins {
    id("com.android.application") version "8.12.1" apply false
    id("org.jetbrains.kotlin.android") version "2.2.10" apply false
    id("org.jetbrains.kotlin.plugin.serialization") version "2.2.10" apply false
    id("com.google.dagger.hilt.android") version "2.57.1" apply false
    id("androidx.navigation.safeargs.kotlin") version "2.9.3" apply false
    id("org.jetbrains.kotlin.plugin.compose") version "2.2.10" apply false // ✅ Needed for Compose with Kotlin 2.x
}

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("com.google.dagger:hilt-android-gradle-plugin:2.57.1")
        classpath("androidx.navigation:navigation-safe-args-gradle-plugin:2.9.3") // latest version
    }
}

tasks.register("clean", Delete::class) {
    delete(rootProject.buildDir)
}
</file>

<file path="gradle.properties">
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true
</file>

<file path="gradle/libs.versions.toml">
[versions]
agp = "8.11.1"
kotlin = "2.0.21"
coreKtx = "1.17.0"
junit = "4.13.2"
junitVersion = "1.3.0"
espressoCore = "3.7.0"
lifecycleRuntimeKtx = "2.9.2"
activityCompose = "1.10.1"
composeBom = "2024.09.00"
navigationFragmentKtx = "2.9.3"
navigationUiKtx = "2.9.3"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-material3 = { group = "androidx.compose.material3", name = "material3" }
androidx-navigation-fragment-ktx = { group = "androidx.navigation", name = "navigation-fragment-ktx", version.ref = "navigationFragmentKtx" }
androidx-navigation-ui-ktx = { group = "androidx.navigation", name = "navigation-ui-ktx", version.ref = "navigationUiKtx" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
</file>

<file path="gradle/wrapper/gradle-wrapper.properties">
#Mon Aug 25 17:39:54 EEST 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
</file>

<file path="gradlew">
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"
</file>

<file path="gradlew.bat">
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega
</file>

<file path="settings.gradle.kts">
pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        maven { url = uri("https://jitpack.io") }
    }
}

rootProject.name = "brewbuddy"
include(":app")
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/local/brewbuddyDatabase.kt">
package com.example.brewbuddy.core.data.local

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import com.example.brewbuddy.core.data.local.dao.DrinkCacheDao
import com.example.brewbuddy.core.data.local.dao.FavoriteDao
import com.example.brewbuddy.core.data.local.dao.OrderDao
import com.example.brewbuddy.core.data.local.entity.DrinkCacheEntity
import com.example.brewbuddy.core.data.local.entity.FavoriteEntity
import com.example.brewbuddy.core.data.local.entity.OrderEntity
import com.example.brewbuddy.core.data.local.entity.OrderItemEntity

@Database(
    entities = [
        DrinkCacheEntity::class,
        FavoriteEntity::class,
        OrderEntity::class,
        OrderItemEntity::class
    ],
    version = 1,
    exportSchema = false
)
abstract class BrewBuddyDatabase : RoomDatabase() {
    abstract fun drinkCacheDao(): DrinkCacheDao
    abstract fun favoriteDao(): FavoriteDao
    abstract fun orderDao(): OrderDao

    companion object {
        @Volatile
        private var INSTANCE: BrewBuddyDatabase? = null
        fun getInstance(context: Context): BrewBuddyDatabase {
            return INSTANCE ?: synchronized(this) {
                INSTANCE ?: Room.databaseBuilder(
                    context.applicationContext,
                    BrewBuddyDatabase::class.java,
                    "brewbuddy_database"
                ).fallbackToDestructiveMigration(false).build().also { INSTANCE = it }
            }
        }
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/local/dao/DrinkCacheDao.kt">
package com.example.brewbuddy.core.data.local.dao

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import com.example.brewbuddy.core.data.local.entity.DrinkCacheEntity
import kotlinx.coroutines.flow.Flow

@Dao
interface DrinkCacheDao {

    @Query("SELECT * FROM drink_cache WHERE isHot = :isHot")
    fun getDrinksByType(isHot: Boolean): Flow<List<DrinkCacheEntity>>

    @Query("SELECT * FROM drink_cache")
    fun getAllDrinks(): Flow<List<DrinkCacheEntity>>

    @Query("SELECT * FROM drink_cache WHERE id = :drinkId")
    suspend fun getDrinkById(drinkId: Int): DrinkCacheEntity?

    @Query("SELECT * FROM drink_cache WHERE title LIKE '%' || :query || '%' OR description LIKE '%' || :query || '%'")
    fun searchDrinks(query: String): Flow<List<DrinkCacheEntity>>

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertDrinks(drinks: List<DrinkCacheEntity>)

    @Query("DELETE FROM drink_cache")
    suspend fun clearAll()

    @Query("SELECT COUNT(*) FROM drink_cache")
    suspend fun getCount(): Int
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/local/dao/FavoriteDao.kt">
package com.example.brewbuddy.core.data.local.dao

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import com.example.brewbuddy.core.data.local.entity.FavoriteEntity
import kotlinx.coroutines.flow.Flow

@Dao
interface FavoriteDao {

    @Query("SELECT * FROM favorites ORDER BY addedAt DESC")
    fun getAllFavorites(): Flow<List<FavoriteEntity>>

    @Query("SELECT EXISTS(SELECT 1 FROM favorites WHERE drinkId = :drinkId)")
    suspend fun isFavorite(drinkId: Int): Boolean

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun addFavorite(favorite: FavoriteEntity)

    @Query("DELETE FROM favorites WHERE drinkId = :drinkId")
    suspend fun removeFavorite(drinkId: Int)

    @Query("SELECT drinkId FROM favorites")
    fun getFavoriteIds(): Flow<List<Int>>
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/local/dao/OrderDao.kt">
package com.example.brewbuddy.core.data.local.dao

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.Query
import androidx.room.Transaction
import com.example.brewbuddy.core.data.local.entity.OrderEntity
import com.example.brewbuddy.core.data.local.entity.OrderItemEntity
import kotlinx.coroutines.flow.Flow

@Dao
interface OrderDao {

    @Query("SELECT * FROM orders ORDER BY placedAt DESC")
    fun getAllOrders(): Flow<List<OrderEntity>>

    @Query("SELECT * FROM order_items WHERE orderId = :orderId")
    suspend fun getOrderItems(orderId: String): List<OrderItemEntity>

    @Insert
    suspend fun insertOrder(order: OrderEntity)

    @Insert
    suspend fun insertOrderItems(items: List<OrderItemEntity>)

    @Transaction
    suspend fun insertOrderWithItems(order: OrderEntity, items: List<OrderItemEntity>) {
        insertOrder(order)
        insertOrderItems(items)
    }

    @Query("DELETE FROM orders WHERE orderId = :orderId")
    suspend fun deleteOrder(orderId: String)
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/local/entity/DrinkCacheEntity.kt">
package com.example.brewbuddy.core.data.local.entity

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "drink_cache")
data class DrinkCacheEntity(
    @PrimaryKey val id: Int,
    val title: String,
    val description: String,
    val ingredients: List<String>,
    val imageUrl: String,
    val isHot: Boolean,
    val cachedAt: Long = System.currentTimeMillis()
)
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/local/entity/FavoriteEntity.kt">
package com.example.brewbuddy.core.data.local.entity

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "favorites")
data class FavoriteEntity(
    @PrimaryKey val drinkId: Int,
    val addedAt: Long = System.currentTimeMillis()
)
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/local/entity/OrderEntity.kt">
package com.example.brewbuddy.core.data.local.entity

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "orders")
data class OrderEntity(
    @PrimaryKey val orderId: String,
    val placedAt: Long,
    val totalAmount: Double
)
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/local/entity/OrderItemEntity.kt">
package com.example.brewbuddy.core.data.local.entity

import androidx.room.Entity
import androidx.room.ForeignKey
import androidx.room.PrimaryKey

@Entity(
    tableName = "order_items",
    foreignKeys = [
        ForeignKey(
            entity = OrderEntity::class,
            parentColumns = ["orderId"],
            childColumns = ["orderId"],
            onDelete = ForeignKey.CASCADE
        )
    ]
)
data class OrderItemEntity(
    @PrimaryKey(autoGenerate = true) val itemId: Long = 0,
    val orderId: String,
    val drinkId: Int,
    val drinkName: String,
    val drinkImage: String,
    val price: Double,
    val quantity: Int
)
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/local/LocalTypeConverters.kt">
package com.example.brewbuddy.core.data.local

import androidx.room.TypeConverter
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken

class LocalTypeConverters {

    @TypeConverter
    fun fromStringList(value: List<String>): String {
        return Gson().toJson(value)
    }

    @TypeConverter
    fun toStringList(value: String): List<String> {
        return Gson().fromJson(value, object : TypeToken<List<String>>() {}.type)
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/remote/CoffeeApiService.kt">
package com.example.brewbuddy.core.data.remote

import com.example.brewbuddy.core.data.remote.dto.CoffeeDto
import retrofit2.http.GET

interface CoffeeApiService {
    @GET("hot")
    suspend fun getHotCoffees(): List<CoffeeDto>

    @GET("iced")
    suspend fun getIcedCoffees(): List<CoffeeDto>
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/remote/dto/CoffeeDto.kt">
package com.example.brewbuddy.core.data.remote.dto

import com.google.gson.annotations.SerializedName

data class CoffeeDto(
    val description: String,
    val id: Int,
    @SerializedName("image")
    val imageUrl: String,
    val ingredients: List<String>,
    val title: String
)
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/remote/dto/DtoMappers.kt">
package com.example.brewbuddy.core.data.remote.dto

import com.example.brewbuddy.core.data.local.entity.DrinkCacheEntity
import com.example.brewbuddy.core.model.Drink
import com.example.brewbuddy.core.util.PriceCatalog

fun CoffeeDto.toDrinkCacheEntity(isHot: Boolean): DrinkCacheEntity {
    return DrinkCacheEntity(
        id = id,
        title = title,
        description = description,
        ingredients = ingredients,
        imageUrl = imageUrl,
        isHot = isHot
    )
}

fun CoffeeDto.toDrink(isHot: Boolean): Drink {
    return Drink(
        id = id,
        name = title,
        description = description,
        ingredients = ingredients,
        imageUrl = imageUrl,
        price = PriceCatalog.getPriceForDrink(title),
        isHot = isHot
    )
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/remote/NetworkModule.kt">
package com.example.brewbuddy.core.data.remote

import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object NetworkModule {
    private const val BASE_URL = "https://api.sampleapis.com/coffee/"

    @Provides
    @Singleton
    fun provideLoggingInterceptor(): HttpLoggingInterceptor {
        return HttpLoggingInterceptor().apply {
            level = HttpLoggingInterceptor.Level.BODY
        }
    }

    @Provides
    @Singleton
    fun provideOkHttpClient(loggingInterceptor: HttpLoggingInterceptor): OkHttpClient {
        return OkHttpClient.Builder()
            .addInterceptor(loggingInterceptor)
            .build()
    }

    @Provides
    @Singleton
    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {
        return Retrofit.Builder()
            .baseUrl(BASE_URL)
            .client(okHttpClient)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
    }

    @Provides
    @Singleton
    fun provideCoffeeApiService(retrofit: Retrofit): CoffeeApiService {
        return retrofit.create(CoffeeApiService::class.java)
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/repository/DrinkRepository.kt">
package com.example.brewbuddy.core.data.repository

import com.example.brewbuddy.core.data.remote.Result
import com.example.brewbuddy.core.model.Drink
import kotlinx.coroutines.flow.Flow

interface DrinkRepository {
    fun getHotDrinks(): Flow<Result<List<Drink>>>
    fun getColdDrinks(): Flow<Result<List<Drink>>>
    fun getAllDrinks(): Flow<Result<List<Drink>>>
    fun searchDrinks(query: String): Flow<List<Drink>>
    suspend fun getDrinkById(drinkId: Int): Drink?
    suspend fun refreshDrinks(): Result<Unit>
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/repository/FavoritesRepository.kt">
package com.example.brewbuddy.core.data.repository

import com.example.brewbuddy.core.model.Drink
import kotlinx.coroutines.flow.Flow

interface FavoritesRepository {
    fun getFavoriteDrinks(): Flow<List<Drink>>
    suspend fun isFavorite(drinkId: Int): Boolean
    suspend fun addToFavorites(drinkId: Int)
    suspend fun removeFromFavorites(drinkId: Int)
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/repository/impl/FavoritesRepositoryImpl.kt">
package com.example.brewbuddy.core.data.repository.impl

import com.example.brewbuddy.core.data.local.dao.DrinkCacheDao
import com.example.brewbuddy.core.data.local.dao.FavoriteDao
import com.example.brewbuddy.core.data.local.entity.FavoriteEntity
import com.example.brewbuddy.core.data.repository.FavoritesRepository
import com.example.brewbuddy.core.data.repository.toDrink
import com.example.brewbuddy.core.model.Drink
import com.example.mygraduationapp.core.util.DispatchersProvider
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flowOn
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class FavoritesRepositoryImpl @Inject constructor(
    private val favoriteDao: FavoriteDao,
    private val drinkCacheDao: DrinkCacheDao,
    private val dispatchersProvider: DispatchersProvider
) : FavoritesRepository {

    override fun getFavoriteDrinks(): Flow<List<Drink>> {
        return favoriteDao.getFavoriteIds()
            .map { favoriteIds ->
                favoriteIds.mapNotNull { id ->
                    drinkCacheDao.getDrinkById(id)?.toDrink()
                }
            }
            .flowOn(dispatchersProvider.io)
    }

    override suspend fun isFavorite(drinkId: Int): Boolean {
        return withContext(dispatchersProvider.io) {
            favoriteDao.isFavorite(drinkId)
        }
    }

    override suspend fun addToFavorites(drinkId: Int) {
        withContext(dispatchersProvider.io) {
            favoriteDao.addFavorite(FavoriteEntity(drinkId))
        }
    }

    override suspend fun removeFromFavorites(drinkId: Int) {
        withContext(dispatchersProvider.io) {
            favoriteDao.removeFavorite(drinkId)
        }
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/di/RepositoryModule.kt">
package com.example.brewbuddy.core.di

import com.example.brewbuddy.core.data.repository.DrinkRepository
import com.example.brewbuddy.core.data.repository.FavoritesRepository
import com.example.brewbuddy.core.data.repository.OrdersRepository
import com.example.brewbuddy.core.data.repository.impl.DrinkRepositoryImpl
import com.example.brewbuddy.core.data.repository.impl.FavoritesRepositoryImpl
import com.example.brewbuddy.core.data.repository.impl.OrdersRepositoryImpl
import dagger.Binds
import dagger.Module
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
abstract class RepositoryModule {

    @Binds
    @Singleton
    abstract fun bindDrinkRepository(
        drinkRepositoryImpl: DrinkRepositoryImpl
    ): DrinkRepository

    @Binds
    @Singleton
    abstract fun bindFavoritesRepository(
        favoritesRepositoryImpl: FavoritesRepositoryImpl
    ): FavoritesRepository

    @Binds
    @Singleton
    abstract fun bindOrdersRepository(
        ordersRepositoryImpl: OrdersRepositoryImpl
    ): OrdersRepository
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/model/Drink.kt">
package com.example.brewbuddy.core.model

data class Drink(
    val id: Int,
    val name: String,
    val description: String,
    val ingredients: List<String>,
    val imageUrl: String,
    val price: Money,
    val isHot: Boolean
) {
    val category: String
        get() = if (isHot) "Hot" else "Cold"

    val ingredientsText: String
        get() = ingredients.joinToString(", ")
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/model/Money.kt">
package com.example.brewbuddy.core.model

import java.text.NumberFormat
import java.util.Locale

data class Money(
    val amount: Double,
    val currency: String = "USD"
) {
    fun formatted(): String {
        val formatter = NumberFormat.getCurrencyInstance(Locale.US)
        return formatter.format(amount)
    }

    operator fun plus(other: Money): Money {
        require(currency == other.currency) { "Currency mismatch" }
        return Money(amount + other.amount, currency)
    }

    operator fun times(multiplier: Int): Money {
        return Money(amount * multiplier, currency)
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/model/Order.kt">
package com.example.brewbuddy.core.model

data class Order(
    val orderId: String,
    val items: List<OrderItem>,
    val totalAmount: Money,
    val placedAt: Long
) {
    val itemCount: Int
        get() = items.sumOf { it.quantity }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/model/OrderItem.kt">
package com.example.brewbuddy.core.model

data class OrderItem(
    val drinkId: Int,
    val drinkName: String,
    val drinkImage: String,
    val price: Money,
    val quantity: Int
) {
    val totalPrice: Money
        get() = price * quantity
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/prefs/UserPrefs.kt">
package com.example.brewbuddy.core.prefs

import android.content.Context
import android.content.Context.MODE_PRIVATE
import android.content.SharedPreferences
import androidx.core.content.edit
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class UserPrefs @Inject constructor(context: Context) {
    private val sharedPreferences: SharedPreferences =
        context.getSharedPreferences("user_prefs", MODE_PRIVATE)

    fun saveData(key: String, value: String) {
        sharedPreferences.edit { putString(key, value) }
    }

    fun getData(key: String): String {
        return sharedPreferences.getString(key, null) ?: ""
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/util/DateFormatters.kt">
package com.example.brewbuddy.core.util

import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

object DateFormatters {

    private val timeFormat = SimpleDateFormat("HH:mm", Locale.getDefault())
    private val dateFormat = SimpleDateFormat("MMM dd, yyyy", Locale.getDefault())
    private val fullDateFormat = SimpleDateFormat("MMM dd, yyyy 'at' HH:mm", Locale.getDefault())

    fun formatTime(timestamp: Long): String {
        return timeFormat.format(Date(timestamp))
    }

    fun formatDate(timestamp: Long): String {
        return dateFormat.format(Date(timestamp))
    }

    fun formatFullDate(timestamp: Long): String {
        return fullDateFormat.format(Date(timestamp))
    }

    fun formatOrderDate(timestamp: Long): String {
        val now = System.currentTimeMillis()
        val diff = now - timestamp

        return when {
            diff < 24 * 60 * 60 * 1000 -> "Today at ${formatTime(timestamp)}"
            diff < 2 * 24 * 60 * 60 * 1000 -> "Yesterday at ${formatTime(timestamp)}"
            else -> formatFullDate(timestamp)
        }
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/util/DispatchersProvider.kt">
package com.example.mygraduationapp.core.util
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.Dispatchers

interface DispatchersProvider {
    val main: CoroutineDispatcher
    val io: CoroutineDispatcher
    val default: CoroutineDispatcher
    val unconfined: CoroutineDispatcher
}

class DispatchersProviderImpl : DispatchersProvider {
    override val main: CoroutineDispatcher = Dispatchers.Main
    override val io: CoroutineDispatcher = Dispatchers.IO
    override val default: CoroutineDispatcher = Dispatchers.Default
    override val unconfined: CoroutineDispatcher = Dispatchers.Unconfined
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/util/Extensions.kt">
package com.example.brewbuddy.core.util

import android.content.Context
import android.widget.Toast
import androidx.lifecycle.LifecycleOwner
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.launch

// Context Extensions
fun Context.showToast(message: String, duration: Int = Toast.LENGTH_SHORT) {
    Toast.makeText(this, message, duration).show()
}

// Flow Extensions
fun <T> Flow<T>.observeIn(lifecycleOwner: LifecycleOwner, action: suspend (T) -> Unit) {
    lifecycleOwner.lifecycleScope.launch {
        collect { action(it) }
    }
}

// String Extensions
fun String.isValidName(): Boolean {
    return trim().length >= 2 && all { it.isLetter() || it.isWhitespace() }
}

fun String.capitalizeWords(): String {
    return split(" ").joinToString(" ") { word ->
        word.lowercase().replaceFirstChar {
            if (it.isLowerCase()) it.titlecase() else it.toString()
        }
    }
}

// List Extensions
fun <T> List<T>.safe(index: Int): T? {
    return if (index in 0 until size) this[index] else null
}

// Double Extensions
fun Double.toCurrency(): String {
    return String.format("$%.2f", this)
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/util/PriceCatalog.kt">
package com.example.brewbuddy.core.util

import com.example.brewbuddy.core.model.Money

object PriceCatalog {

    private val drinkPrices = mapOf(
        // Hot Drinks Base Prices
        "espresso" to 2.50,
        "americano" to 3.00,
        "cappuccino" to 3.50,
        "latte" to 4.00,
        "macchiato" to 3.75,
        "mocha" to 4.25,
        "flat white" to 3.80,
        "cortado" to 3.60,
        "gibraltar" to 3.60,
        "breve" to 4.10,
        "affogato" to 4.50,
        "con panna" to 3.25,
        "romano" to 2.75,
        "ristretto" to 2.60,
        "lungo" to 2.80,
        "doppio" to 3.20,
        "red eye" to 3.40,
        "black eye" to 3.60,
        "drip coffee" to 2.25,
        "french press" to 3.10,
        "pour over" to 3.30,
        "turkish coffee" to 3.80,
        "vienna coffee" to 4.20,
        "irish coffee" to 5.50,
        "cafe au lait" to 3.70,
        "cafe bombón" to 4.00,
        "cafe con leche" to 3.90,
        "cafe noisette" to 3.60,
        "cafe zorro" to 3.40,

        // Cold Drinks Base Prices
        "iced coffee" to 3.20,
        "iced americano" to 3.20,
        "iced latte" to 4.20,
        "iced cappuccino" to 3.70,
        "iced mocha" to 4.45,
        "iced macchiato" to 3.95,
        "cold brew" to 3.50,
        "nitro cold brew" to 4.00,
        "iced flat white" to 4.00,
        "iced cortado" to 3.80,
        "iced caramel macchiato" to 4.30,
        "iced vanilla latte" to 4.40,
        "iced hazelnut latte" to 4.40,
        "frappé" to 4.60,
        "iced espresso" to 2.70,
        "iced long shot" to 3.00,
        "iced red eye" to 3.60,
        "iced black eye" to 3.80,
        "vietnamese iced coffee" to 4.80,
        "mazagran" to 4.20,
        "shakerato" to 4.50,
        "iced gibraltar" to 3.80,
        "iced breve" to 4.30,
        "iced con panna" to 3.45,
        "affogato float" to 5.20,
        "coffee smoothie" to 5.00,
        "coffee milkshake" to 5.50,
        "iced turkish coffee" to 4.00,
        "cold drip coffee" to 3.80,
        "japanese iced coffee" to 3.60
    )

    fun getPriceForDrink(drinkName: String): Money {
        val cleanName = drinkName.lowercase().trim()

        // Try exact match first
        val exactPrice = drinkPrices[cleanName]
        if (exactPrice != null) {
            return Money(exactPrice)
        }

        // Try partial match
        val partialPrice = drinkPrices.entries.find { (key, _) ->
            cleanName.contains(key) || key.contains(cleanName)
        }?.value

        if (partialPrice != null) {
            return Money(partialPrice)
        }

        // Fallback: generate price based on drink name characteristics
        return Money(generateFallbackPrice(cleanName))
    }

    private fun generateFallbackPrice(drinkName: String): Double {
        val basePrice = when {
            drinkName.contains("espresso") -> 2.50
            drinkName.contains("americano") -> 3.00
            drinkName.contains("latte") -> 4.00
            drinkName.contains("cappuccino") -> 3.50
            drinkName.contains("mocha") -> 4.25
            drinkName.contains("macchiato") -> 3.75
            drinkName.contains("iced") -> 3.50
            drinkName.contains("cold") -> 3.80
            drinkName.contains("brew") -> 3.30
            drinkName.contains("frappé") || drinkName.contains("frappe") -> 4.60
            drinkName.contains("smoothie") -> 5.00
            drinkName.contains("shake") -> 5.50
            else -> 3.50 // Default price
        }

        // Add some variation based on name length and complexity
        val variation = (drinkName.length % 5) * 0.10
        val complexity = if (drinkName.split(" ").size > 2) 0.25 else 0.0

        return basePrice + variation + complexity
    }

    // Get a random selection of drinks for recommendations
    fun getRecommendedDrinks(count: Int = 6): List<String> {
        return drinkPrices.keys.shuffled().take(count)
    }

    // Get best seller (highest priced item as a simple heuristic)
    fun getBestSeller(): String {
        return drinkPrices.maxByOrNull { it.value }?.key ?: "latte"
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/favorites/FavoritesViewModel.kt">
package com.example.brewbuddy.feature.favorites

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.brewbuddy.core.data.repository.FavoritesRepository
import com.example.brewbuddy.core.model.Drink
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class FavoritesViewModel @Inject constructor(
    private val repository: FavoritesRepository
) : ViewModel() {

    private val _favorites = MutableStateFlow<List<Drink>>(emptyList())
    val favorites: StateFlow<List<Drink>> = _favorites.asStateFlow()

    init {
        loadFavorites()
    }

    private fun loadFavorites() {
        viewModelScope.launch {
            repository.getFavoriteDrinks().collect {
                _favorites.value = it
            }
        }
    }

    fun removeFromFavorites(drinkId: Int) {
        viewModelScope.launch {
            repository.removeFromFavorites(drinkId)
            // refresh
            loadFavorites()
        }
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/home/HomeViewModel.kt">
package com.example.brewbuddy.feature.home

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.brewbuddy.core.data.remote.Result
import com.example.brewbuddy.core.data.repository.DrinkRepository
import com.example.brewbuddy.core.model.Drink
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch

class HomeViewModel(
    private val repository: DrinkRepository
) : ViewModel() {

    private val _hotDrinks = MutableStateFlow<Result<List<Drink>>>(Result.Loading)
    val hotDrinks: StateFlow<Result<List<Drink>>> = _hotDrinks.asStateFlow()

    private val _coldDrinks = MutableStateFlow<Result<List<Drink>>>(Result.Loading)
    val coldDrinks: StateFlow<Result<List<Drink>>> = _coldDrinks.asStateFlow()

    private val _allDrinks = MutableStateFlow<Result<List<Drink>>>(Result.Loading)
    val allDrinks: StateFlow<Result<List<Drink>>> = _allDrinks.asStateFlow()

    private val _searchResults = MutableStateFlow<List<Drink>>(emptyList())
    val searchResults: StateFlow<List<Drink>> = _searchResults.asStateFlow()

    init {
        loadHotDrinks()
        loadColdDrinks()
        loadAllDrinks()
    }

    private fun loadHotDrinks() {
        viewModelScope.launch {
            repository.getHotDrinks()
                .collect { result -> _hotDrinks.value = result }
        }
    }

    private fun loadColdDrinks() {
        viewModelScope.launch {
            repository.getColdDrinks()
                .collect { result -> _coldDrinks.value = result }
        }
    }

    private fun loadAllDrinks() {
        viewModelScope.launch {
            repository.getAllDrinks()
                .collect { result -> _allDrinks.value = result }
        }
    }

    fun searchDrinks(query: String) {
        viewModelScope.launch {
            repository.searchDrinks(query)
                .collect { drinks -> _searchResults.value = drinks }
        }
    }

    fun refreshDrinks() {
        viewModelScope.launch {
            repository.refreshDrinks()
            // After refresh, reload data
            loadHotDrinks()
            loadColdDrinks()
            loadAllDrinks()
        }
    }
}
</file>

<file path="app/src/main/res/layout/activity_main.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/root"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <fragment
        android:id="@+id/nav_host"
        android:name="androidx.navigation.fragment.NavHostFragment"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:defaultNavHost="true"
        app:navGraph="@navigation/nav_graph" />

    <com.google.android.material.bottomnavigation.BottomNavigationView
        android:id="@+id/bottomNav"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom"
        android:background="@drawable/bottom_nav_bar"
        app:itemActiveIndicatorStyle="@style/activeItem"
        app:itemIconTint="@color/soft_beige"
        app:itemTextColor="@color/soft_beige"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:menu="@menu/bottom_nav_menu" />
</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_drink_details.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:id="@+id/drinkDetailsFragment">

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_favorites.xml">
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/light_beige"
    android:orientation="vertical"
    android:padding="16dp">

    <TextView
        android:id="@+id/tvEmpty"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center_horizontal"
        android:layout_marginTop="24dp"
        android:text="No favorites yet"
        android:visibility="gone" />

    <!-- the grid view will be handled in .kt (logic file) like that  -->
    <!--    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {-->
    <!--        binding.rvFavorites.layoutManager = GridLayoutManager(requireContext(), 2) // grid-->
    <!--        binding.rvFavorites.adapter = adapter-->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvFavorites"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />
</LinearLayout>
</file>

<file path="app/src/main/res/layout/fragment_home.xml">
<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/light_beige"
    android:fillViewport="true">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingHorizontal="32dp"
        android:paddingVertical="8dp">

        <androidx.constraintlayout.widget.Guideline
            android:id="@+id/guideline_base"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            app:layout_constraintGuide_begin="26dp" />

        <TextView
            android:id="@+id/tvGreeting"
            style="@style/textGeneral"
            android:text="@string/good_day_emad_rabie"
            android:textColor="@color/dark_copper"
            app:layout_constraintStart_toStartOf="@+id/guideline_base"
            app:layout_constraintTop_toTopOf="parent" />

        <ImageView
            android:id="@+id/icon_group"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginEnd="6dp"
            android:src="@drawable/ic_menu_list"
            app:layout_constraintBottom_toBottomOf="@+id/tvGreeting"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toTopOf="@+id/tvGreeting" />

        <ImageView
            android:id="@+id/ic_bell"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginEnd="6dp"
            android:src="@drawable/ic_bell"
            app:layout_constraintBottom_toBottomOf="@+id/tvGreeting"
            app:layout_constraintEnd_toStartOf="@+id/icon_group"
            app:layout_constraintTop_toTopOf="@+id/tvGreeting" />


        <androidx.cardview.widget.CardView
            android:id="@+id/cvBestSeller"
            android:layout_width="0dp"
            android:layout_height="180dp"
            android:layout_marginHorizontal="8dp"
            android:layout_marginTop="32dp"
            app:cardBackgroundColor="@color/dark_copper"
            app:cardCornerRadius="24dp"
            app:cardElevation="4dp"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/tvGreeting">

            <androidx.constraintlayout.widget.ConstraintLayout
                android:layout_width="match_parent"
                android:layout_height="match_parent">

                <TextView
                    style="@style/textGeneral"
                    android:layout_marginTop="20dp"
                    android:fontFamily="@font/inter"
                    android:text="Best seller of the week"
                    android:textSize="12sp"
                    app:layout_constraintStart_toStartOf="@id/guideline"
                    app:layout_constraintTop_toTopOf="parent" />

                <TextView
                    android:id="@+id/tvCoffeeTitle"
                    style="@style/textGeneral"
                    android:layout_width="134dp"
                    android:fontFamily="@font/inter_bold"
                    android:text="Iced Coffee Sweet Heaven"
                    app:layout_constraintBottom_toBottomOf="parent"
                    app:layout_constraintStart_toStartOf="@id/guideline"
                    app:layout_constraintTop_toTopOf="parent"
                    app:layout_constraintVertical_bias="0.44" />

                <TextView
                    android:id="@+id/tvMoreInfo"
                    style="@style/textGeneral"
                    android:fontFamily="@font/inter"
                    android:text="More info"
                    android:textSize="12sp"
                    app:layout_constraintBottom_toBottomOf="parent"
                    app:layout_constraintStart_toStartOf="@id/guideline"
                    app:layout_constraintTop_toTopOf="@+id/tvCoffeeTitle"
                    app:layout_constraintVertical_bias="0.78" />

                <ImageView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginStart="12dp"
                    android:src="@drawable/ic_arrow"
                    app:layout_constraintBottom_toBottomOf="@+id/tvMoreInfo"
                    app:layout_constraintStart_toEndOf="@+id/tvMoreInfo"
                    app:layout_constraintTop_toTopOf="@+id/tvMoreInfo" />

                <com.google.android.material.imageview.ShapeableImageView
                    android:id="@+id/ivBestImage"
                    android:layout_width="82dp"
                    android:layout_height="match_parent"
                    android:layout_marginVertical="20dp"
                    android:layout_marginEnd="21dp"
                    android:cropToPadding="true"
                    android:scaleType="centerCrop"
                    android:src="@drawable/img_recommended"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:shapeAppearanceOverlay="@style/RoundedImage" />

                <androidx.constraintlayout.widget.Guideline
                    android:id="@+id/guideline"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    app:layout_constraintGuide_begin="26dp" />

            </androidx.constraintlayout.widget.ConstraintLayout>
        </androidx.cardview.widget.CardView>

        <TextView
            android:id="@+id/tvRecommendations"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="50dp"
            android:fontFamily="@font/inter_semibold"
            android:text="This Week’s Recommendations"
            android:textSize="18sp"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/cvBestSeller" />

        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/rvRecommendations"
            android:layout_width="0dp"
            android:layout_height="240dp"
            android:orientation="horizontal"
            android:overScrollMode="never"
            app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/tvRecommendations"
            tools:listitem="@layout/item_recommendation" />

        <TextView
            android:id="@+id/what_in_shop"
            style="@style/textGeneral"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="What’s in the shop?"
            android:textColor="@color/dark_copper"
            android:textSize="18sp"
            app:layout_constraintStart_toStartOf="@+id/tvRecommendations"
            app:layout_constraintTop_toBottomOf="@+id/rvRecommendations" />

        <androidx.cardview.widget.CardView
            android:id="@+id/cv_new_menu"
            android:layout_width="0dp"
            android:layout_height="180dp"
            android:layout_marginHorizontal="8dp"
            android:layout_marginTop="32dp"
            app:cardCornerRadius="24dp"
            app:cardElevation="4dp"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/what_in_shop">

            <FrameLayout
                android:layout_width="match_parent"
                android:layout_height="match_parent">

                <ImageView
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:scaleType="centerCrop"
                    android:src="@drawable/img_new_item" />

                <ImageView
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:scaleType="centerCrop"
                    android:src="@drawable/linear_effect" />

            </FrameLayout>

            <androidx.constraintlayout.widget.ConstraintLayout
                android:layout_width="match_parent"
                android:layout_height="match_parent">

                <TextView
                    android:id="@+id/tv_coffee_new"
                    style="@style/textGeneral"
                    android:layout_width="136dp"
                    android:fontFamily="@font/inter_bold"
                    android:text="Introducing our new menu"
                    app:layout_constraintBottom_toBottomOf="parent"
                    app:layout_constraintStart_toStartOf="@id/guideline_second"
                    app:layout_constraintTop_toTopOf="parent"
                    app:layout_constraintVertical_bias="0.3" />

                <TextView
                    style="@style/textGeneral"
                    android:layout_width="244dp"
                    android:layout_height="wrap_content"
                    android:text="Try our refreshing lemonade, strawberry lemonade, and orange lemonade"
                    android:textSize="12sp"
                    app:layout_constraintBottom_toBottomOf="parent"
                    app:layout_constraintStart_toStartOf="@id/guideline_second"
                    app:layout_constraintTop_toBottomOf="@+id/tv_coffee_new" />

                <androidx.constraintlayout.widget.Guideline
                    android:id="@+id/guideline_second"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    app:layout_constraintGuide_begin="26dp" />

            </androidx.constraintlayout.widget.ConstraintLayout>
        </androidx.cardview.widget.CardView>


    </androidx.constraintlayout.widget.ConstraintLayout>
</ScrollView>
</file>

<file path="app/src/main/res/layout/fragment_menu.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/light_beige"
    android:orientation="vertical">

    <androidx.constraintlayout.widget.Guideline
        android:id="@+id/guideline_base"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        app:layout_constraintGuide_begin="44dp" />

    <TextView
        android:id="@+id/tvGreeting"
        style="@style/textGeneral"
        android:layout_width="180dp"
        android:layout_marginTop="16dp"
        android:text="What would you like to drink today?"
        android:textColor="@color/dark_copper"
        app:layout_constraintStart_toStartOf="@+id/guideline_base"
        app:layout_constraintTop_toTopOf="parent" />

    <ImageView
        android:id="@+id/icon_group"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginEnd="44dp"
        android:src="@drawable/ic_menu_list"
        app:layout_constraintBottom_toBottomOf="@+id/tvGreeting"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="@+id/tvGreeting" />

    <ImageView
        android:id="@+id/ic_bell"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginEnd="6dp"
        android:src="@drawable/ic_bell"
        app:layout_constraintBottom_toBottomOf="@+id/tvGreeting"
        app:layout_constraintEnd_toStartOf="@+id/icon_group"
        app:layout_constraintTop_toTopOf="@+id/tvGreeting" />


    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/etSearchLayout"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="32dp"
        app:boxBackgroundColor="@color/soft_beige"
        app:boxBackgroundMode="outline"
        app:boxCornerRadiusBottomEnd="22dp"
        app:boxCornerRadiusBottomStart="22dp"
        app:boxCornerRadiusTopEnd="22dp"
        app:boxCornerRadiusTopStart="22dp"
        app:boxStrokeWidth="2dp"
        app:layout_constraintEnd_toEndOf="@+id/icon_group"
        app:layout_constraintStart_toStartOf="@+id/guideline_base"
        app:layout_constraintTop_toBottomOf="@+id/tvGreeting">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/etSearch"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="Search.." />
    </com.google.android.material.textfield.TextInputLayout>

    <RadioGroup

        android:id="@+id/toggle"
        android:layout_width="match_parent"
        android:layout_height="30dp"
        android:layout_marginLeft="50dp"
        android:layout_marginTop="40dp"
        android:layout_marginRight="50dp"
        android:layout_marginBottom="24dp"
        android:background="@drawable/gold_out_line"
        android:checkedButton="@+id/offer"
        android:orientation="horizontal"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/etSearchLayout">

        <RadioButton
            android:id="@+id/chipHot"
            android:layout_width="0dp"
            android:layout_height="match_parent"
            android:layout_marginStart="1dp"
            android:layout_marginTop="1dp"
            android:layout_marginBottom="1dp"
            android:layout_weight="1"
            android:background="@drawable/toggle_widget_background"
            android:button="@null"
            android:checked="true"
            android:gravity="center"
            android:text="Hot"
            android:textColor="@color/chip_text_color"
            android:textSize="18sp" />

        <RadioButton
            android:id="@+id/chipIced"
            android:layout_width="0dp"
            android:layout_height="match_parent"
            android:layout_marginTop="1dp"
            android:layout_marginEnd="1dp"
            android:layout_marginBottom="1dp"
            android:layout_weight="1"
            android:background="@drawable/toggle_widget_background"
            android:button="@null"
            android:gravity="center"
            android:text="Cold"
            android:textColor="@color/chip_text_color"
            android:textSize="18sp" />
    </RadioGroup>

    <ProgressBar
        android:id="@+id/progress"
        style="?android:attr/progressBarStyle"
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:layout_marginTop="8dp"
        android:indeterminate="true"
        android:indeterminateTint="@color/dark_copper"
        android:visibility="gone"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        tools:visibility="visible" />

    <TextView
        android:id="@+id/tvError"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="8dp"
        android:textColor="@android:color/holo_red_light"
        android:visibility="gone"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvMenu"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_marginHorizontal="-16dp"
        android:layout_marginTop="36dp"
        android:layout_weight="1"
        android:background="@drawable/bottom_sheet_shape"
        android:overScrollMode="never"
        android:padding="32dp"
        android:paddingBottom="64dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.0"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/toggle"
        app:layout_constraintVertical_bias="0.0" />

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/fragment_orders.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/light_beige"
    android:padding="16dp">

    <TextView
        android:id="@+id/tvEmpty"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center_horizontal"
        android:layout_marginTop="24dp"
        android:text="No orders yet"
        android:visibility="gone"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <androidx.constraintlayout.widget.Guideline
        android:id="@+id/guideline_base"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        app:layout_constraintGuide_begin="26dp" />

    <TextView
        android:id="@+id/tvHeader"
        style="@style/textGeneral"
        android:text="Your Orders"
        android:textColor="@color/dark_copper"
        app:layout_constraintStart_toStartOf="@+id/guideline_base"
        app:layout_constraintTop_toTopOf="parent" />

    <ImageView
        android:id="@+id/icon_group"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginEnd="6dp"
        android:src="@drawable/ic_menu_list"
        app:layout_constraintBottom_toBottomOf="@+id/tvHeader"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="@+id/tvHeader" />

    <ImageView
        android:id="@+id/ic_bell"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginEnd="6dp"
        android:src="@drawable/ic_bell"
        app:layout_constraintBottom_toBottomOf="@+id/tvHeader"
        app:layout_constraintEnd_toStartOf="@+id/icon_group"
        app:layout_constraintTop_toTopOf="@+id/tvHeader" />


    <RadioGroup

        android:id="@+id/toggle"
        android:layout_width="180dp"
        android:layout_height="30dp"
        android:layout_marginTop="40dp"
        android:layout_marginBottom="24dp"
        android:background="@drawable/gold_out_line"
        android:checkedButton="@+id/offer"
        android:orientation="horizontal"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0"
        app:layout_constraintStart_toStartOf="@+id/guideline_base"
        app:layout_constraintTop_toBottomOf="@+id/tvHeader">

        <RadioButton
            android:id="@+id/chipRecently"
            android:layout_width="0dp"
            android:layout_height="match_parent"
            android:layout_marginStart="1dp"
            android:layout_marginTop="1dp"
            android:layout_marginBottom="1dp"
            android:layout_weight="1"
            android:background="@drawable/toggle_widget_background"
            android:button="@null"
            android:checked="true"
            android:gravity="center"
            android:text="Recently"
            android:textColor="@color/chip_text_color"
            android:textSize="12sp" />

        <RadioButton
            android:id="@+id/chipPastOrders"
            android:layout_width="0dp"
            android:layout_height="match_parent"
            android:layout_marginTop="1dp"
            android:layout_marginEnd="1dp"
            android:layout_marginBottom="1dp"
            android:layout_weight="1"
            android:background="@drawable/toggle_widget_background"
            android:button="@null"
            android:gravity="center"
            android:text="Past Orders"
            android:textColor="@color/chip_text_color"
            android:textSize="12sp" />
    </RadioGroup>

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvOrders"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_marginTop="42dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/toggle" />
</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/item_coffee.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:padding="8dp">

    <ImageView
        android:id="@+id/coffeeImage"
        android:layout_width="80dp"
        android:layout_height="80dp"
        android:scaleType="centerCrop"
        android:contentDescription="@string/coffee_image"
        android:src="@android:drawable/ic_menu_gallery"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"/>

    <TextView
        android:id="@+id/coffeeName"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/latte"
        android:textSize="16sp"
        android:textStyle="bold"
        android:textColor="@color/black"
        app:layout_constraintStart_toEndOf="@id/coffeeImage"
        app:layout_constraintTop_toTopOf="@id/coffeeImage"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/coffeePrice"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/price_4_50"
        android:textSize="14sp"
        android:textColor="@color/gray"
        app:layout_constraintStart_toStartOf="@id/coffeeName"
        app:layout_constraintTop_toBottomOf="@id/coffeeName"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/coffeeIngredients"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/ingredients_milk_coffee"
        android:textSize="12sp"
        android:textColor="@color/gray_light"
        app:layout_constraintStart_toStartOf="@id/coffeeName"
        app:layout_constraintTop_toBottomOf="@id/coffeePrice"
        app:layout_constraintEnd_toEndOf="parent"/>

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/item_drink.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:padding="8dp">

    <ImageView
        android:id="@+id/drinkImage"
        android:layout_width="match_parent"
        android:layout_height="150dp"
        android:scaleType="centerCrop"
        android:src="@android:drawable/ic_menu_gallery"
        android:contentDescription="@string/drink_image"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/drinkName"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/sample_drink_name"
        android:textSize="16sp"
        android:textStyle="bold"
        android:textColor="@color/black"
        android:layout_marginTop="4dp"
        app:layout_constraintTop_toBottomOf="@id/drinkImage"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/drinkPrice"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/price_4_50"
        android:textSize="14sp"
        android:textColor="@color/gray"
        app:layout_constraintTop_toBottomOf="@id/drinkName"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/item_favorite.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:padding="8dp">

    <ImageView
        android:id="@+id/favImage"
        android:layout_width="80dp"
        android:layout_height="80dp"
        android:scaleType="centerCrop"
        android:src="@android:drawable/ic_menu_gallery"
        android:contentDescription="@string/drink_image"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"/>

    <TextView
        android:id="@+id/favName"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/sample_drink_name"
        android:textSize="16sp"
        android:textStyle="bold"
        android:textColor="@color/black"
        app:layout_constraintStart_toEndOf="@id/favImage"
        app:layout_constraintTop_toTopOf="@id/favImage"
        app:layout_constraintEnd_toStartOf="@id/removeFavorite"/>

    <TextView
        android:id="@+id/favPrice"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/price_4_50"
        android:textSize="14sp"
        android:textColor="@color/gray"
        app:layout_constraintStart_toStartOf="@id/favName"
        app:layout_constraintTop_toBottomOf="@id/favName"
        app:layout_constraintEnd_toEndOf="@id/favName"/>

    <ImageView
        android:id="@+id/removeFavorite"
        android:layout_width="24dp"
        android:layout_height="24dp"
        android:src="@android:drawable/ic_menu_delete"
        android:contentDescription="@string/remove_from_favorites"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"/>

</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/item_order.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:padding="8dp">

    <TextView
        android:id="@+id/orderId"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="Order #1234"
        android:textStyle="bold"
        android:textSize="14sp"
        android:textColor="@color/black"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/orderItems"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="Latte x2, Mocha x1"
        android:textSize="14sp"
        android:textColor="@color/gray"
        android:layout_marginTop="2dp"
        app:layout_constraintTop_toBottomOf="@id/orderId"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/orderDate"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="12 Aug, 14:30"
        android:textSize="12sp"
        android:textColor="@color/gray_light"
        android:layout_marginTop="2dp"
        app:layout_constraintTop_toBottomOf="@id/orderItems"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>
</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/layout/item_recommendation.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="120dp"
    android:layout_height="wrap_content"
    android:padding="4dp">

    <ImageView
        android:id="@+id/recoImage"
        android:layout_width="0dp"
        android:layout_height="100dp"
        android:scaleType="centerCrop"
        android:contentDescription="@string/drink_image"
        android:src="@android:drawable/ic_menu_gallery"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="parent"/>

    <TextView
        android:id="@+id/recoName"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/sample_drink_name"
        android:textSize="14sp"
        android:textStyle="bold"
        android:textColor="@color/black"
        android:layout_marginTop="4dp"
        app:layout_constraintTop_toBottomOf="@id/recoImage"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/recoPrice"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        tools:text="@string/price_4_50"
        android:textSize="12sp"
        android:textColor="@color/gray"
        app:layout_constraintTop_toBottomOf="@id/recoName"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>
</androidx.constraintlayout.widget.ConstraintLayout>
</file>

<file path="app/src/main/res/navigation/nav_graph.xml">
<?xml version="1.0" encoding="utf-8"?>
<navigation xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/nav_graph"
    app:startDestination="@id/homeFragment">

    <!-- Home Fragment -->
    <fragment
        android:id="@+id/homeFragment"
        android:name="com.example.brewbuddy.feature.home.ui.HomeFragment"
        android:label="Home">
        <action
            android:id="@+id/action_homeFragment_to_drinkDetailsFragment"
            app:destination="@id/drinkDetailsFragment" />
    </fragment>

    <!-- Menu Fragment -->
    <fragment
        android:id="@+id/menuFragment"
        android:name="com.example.brewbuddy.feature.menu.ui.MenuFragment"
        android:label="Menu">
        <action
            android:id="@+id/action_menuFragment_to_drinkDetailsFragment"
            app:destination="@id/drinkDetailsFragment" />
    </fragment>

    <!-- Drink Details Fragment -->
    <fragment
        android:id="@+id/drinkDetailsFragment"
        android:name="com.example.brewbuddy.feature.menu.ui.details.DrinkDetailsFragment"
        android:label="Drink Details">
        <argument
            android:name="drinkId"
            app:argType="integer" />
    </fragment>

</navigation>
</file>

<file path="app/src/main/res/values/colors.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
    <color name="primary">#FF6F4E37</color>
    <color name="primary_dark">#FF5A3C28</color>
    <color name="gray">#FF9E9E9E</color>
    <color name="gray_light">#FFBDBDBD</color>
    <color name="secondary">#FFD7CCC8</color>
    <!--app colors-->
    <color name="dark_copper">#834D1E</color>
    <color name="warm_golden">#E8C88B</color>
    <color name="light_beige">#F8E3B6</color>
    <color name="soft_beige">#FCF2D9</color>
    <color name="red_dot">#FB452D</color>
</resources>
</file>

<file path="app/src/main/res/values/strings.xml">
<resources>
    <string name="app_name">Mygraduationapp</string>
    <string name="enter_your_name">Enter Your Name</string>
    <string name="save">Save</string>
    <string name="empty_favorites">Empty favorites</string>
    <string name="no_favorites_yet">No favorites yet</string>
    <string name="add_some_drinks_to_favorites">Add some drinks to your favorites</string>
    <string name="drink_image">Drink image</string>
    <string name="remove_from_favorites">Remove from favorites</string>
    <string name="sample_drink_name">Drink</string>
    <string name="description_goes_here">Description goes here...</string>
    <string name="ingredients_milk_coffee">Ingredients: milk, coffee</string>
    <string name="price_4_50">$4.50</string>   <!-- renamed -->
    <string name="quantity_one">1</string>    <!-- renamed -->
    <string name="plus_sign">+</string>       <!-- renamed -->
    <string name="total_4_50">Total: $4.50</string>
    <string name="buy_now">Buy Now</string>
    <string name="favorite">Favorite</string>
    <string name="minus_sign">-</string>      <!-- renamed -->
    <string name="latte">Latte</string>       <!-- renamed -->
    <string name="back">lll</string>
    <string name="coffee_image">uuu</string>

    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="home">Home</string>
    <string name="menu">Menu</string>
    <string name="orders">Orders</string>
    <string name="favorites">Favorites</string>
    <string name="title">Title</string>
    <string name="rp_20_000">Rp 20.000</string>
    <string name="good_day_emad_rabie">Good day, Emad Rabie</string>
</resources>
</file>

<file path="app/src/main/res/values/styles.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <!-- Main App Theme -->
    <style name="Theme.BrewBuddy" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <!-- Customize your colors here -->
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorOnPrimary">@color/white</item>
        <item name="colorSecondary">@color/teal_200</item>
        <item name="colorOnSecondary">@color/black</item>
    </style>

    <style name="activeItem">
        <item name="android:backgroundTint">@color/dark_copper</item>
    </style>

    <style name="ShapeAppearanceOverlay.BrewBuddy.SegmentLeft">
        <item name="cornerSizeTopLeft">20dp</item>
        <item name="cornerSizeBottomLeft">20dp</item>
        <item name="cornerSizeTopRight">0dp</item>
        <item name="cornerSizeBottomRight">0dp</item>
    </style>

    <style name="ShapeAppearanceOverlay.BrewBuddy.SegmentRight">
        <item name="cornerSizeTopLeft">0dp</item>
        <item name="cornerSizeBottomLeft">0dp</item>
        <item name="cornerSizeTopRight">20dp</item>
        <item name="cornerSizeBottomRight">20dp</item>
    </style>



    <!-- Used when you reference @style/ShapeAppearanceOverlay.BrewBuddy -->
    <style name="ShapeAppearanceOverlay.BrewBuddy">
        <item name="cornerSizeTopLeft">24dp</item>
        <item name="cornerSizeTopRight">24dp</item>
        <item name="cornerSizeBottomLeft">0dp</item>
        <item name="cornerSizeBottomRight">0dp</item>
    </style>

    <!-- Optional: if you referenced this in a theme for the BottomSheet -->
    <style name="ShapeAppearanceOverlay.BrewBuddy.BottomSheet">
        <item name="cornerSizeTopLeft">24dp</item>
        <item name="cornerSizeTopRight">24dp</item>
        <item name="cornerSizeBottomLeft">0dp</item>
        <item name="cornerSizeBottomRight">0dp</item>
    </style>


    <style name="textGeneral">
        <item name="android:textColor">@color/soft_beige</item>
        <item name="android:textSize">16sp</item>
        <item name="android:layout_width">wrap_content</item>
        <item name="android:layout_height">wrap_content</item>
        <item name="android:fontFamily">@font/inter_semibold</item>
    </style>

    <style name="RoundedImage" parent="">
        <item name="cornerFamily">rounded</item>
        <item name="cornerSizeTopLeft">12dp</item>
        <item name="cornerSizeTopRight">12dp</item>
        <item name="cornerSizeBottomLeft">12dp</item>
        <item name="cornerSizeBottomRight">12dp</item>
    </style>

    <style name="RoundedSheet" parent="">
        <item name="cornerFamily">rounded</item>
        <item name="cornerSizeTopLeft">30dp</item>
        <item name="cornerSizeTopRight">30dp</item>
        <item name="cornerSizeBottomLeft">0dp</item>
        <item name="cornerSizeBottomRight">0dp</item>
    </style>

</resources>
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/remote/Result.kt">
package com.example.brewbuddy.core.data.remote

sealed class Result<out T> {
    data class Success<out T>(val data: T) : Result<T>()
    data class Failure(val exception: Exception) : Result<Nothing>()
    object Loading : Result<Nothing>()

}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/repository/impl/DrinkRepositoryImpl.kt">
package com.example.brewbuddy.core.data.repository.impl

import android.os.Build
import androidx.annotation.RequiresExtension
import com.example.brewbuddy.core.data.local.dao.DrinkCacheDao
import com.example.brewbuddy.core.data.remote.ApiManager
import com.example.brewbuddy.core.data.remote.CoffeeApiService
import com.example.brewbuddy.core.data.remote.Result
import com.example.brewbuddy.core.data.remote.dto.toDrinkCacheEntity
import com.example.brewbuddy.core.data.repository.DrinkRepository
import com.example.brewbuddy.core.data.repository.toDrink
import com.example.brewbuddy.core.model.Drink
import com.example.mygraduationapp.core.util.DispatchersProvider
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.flow.flowOn
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class DrinkRepositoryImpl @Inject constructor(
    private val apiService: CoffeeApiService,
    private val drinkCacheDao: DrinkCacheDao,
    private val dispatchersProvider: DispatchersProvider
) : DrinkRepository {

    @RequiresExtension(extension = Build.VERSION_CODES.S, version = 7)
    override fun getHotDrinks(): Flow<Result<List<Drink>>> = flow {
        // Return cached data first
        val cachedDrinks = drinkCacheDao.getDrinksByType(isHot = true)
            .map { entities -> entities.map { it.toDrink() } }
            .first()

        if (cachedDrinks.isNotEmpty()) {
            emit(Result.Success(cachedDrinks))
        } else {
            // If no cached data, fetch from API
            val apiResult = ApiManager.execute {
                apiService.getHotCoffees()
            }

            when (apiResult) {
                is Result.Success -> {
                    val entities = apiResult.data.map { it.toDrinkCacheEntity(isHot = true) }
                    drinkCacheDao.insertDrinks(entities)
                    emit(Result.Success(entities.map { it.toDrink() }))
                }

                is Result.Failure -> {
                    emit(Result.Failure(apiResult.exception))
                }
            }
        }
    }.flowOn(dispatchersProvider.io)

    @RequiresExtension(extension = Build.VERSION_CODES.S, version = 7)
    override fun getColdDrinks(): Flow<Result<List<Drink>>> = flow {
        // Return cached data first
        val cachedDrinks = drinkCacheDao.getDrinksByType(isHot = false)
            .map { entities -> entities.map { it.toDrink() } }
            .first()

        if (cachedDrinks.isNotEmpty()) {
            emit(Result.Success(cachedDrinks))
        } else {
            // If no cached data, fetch from API
            val apiResult = ApiManager.execute {
                apiService.getIcedCoffees()
            }

            when (apiResult) {
                is Result.Success -> {
                    val entities = apiResult.data.map { it.toDrinkCacheEntity(isHot = false) }
                    drinkCacheDao.insertDrinks(entities)
                    emit(Result.Success(entities.map { it.toDrink() }))
                }

                is Result.Failure -> {
                    emit(Result.Failure(apiResult.exception))
                }
            }
        }
    }.flowOn(dispatchersProvider.io)

    @RequiresExtension(extension = Build.VERSION_CODES.S, version = 7)
    override fun getAllDrinks(): Flow<Result<List<Drink>>> = flow {
        val cachedDrinks = drinkCacheDao.getAllDrinks().first()

        if (cachedDrinks.isNotEmpty()) {
            emit(Result.Success(cachedDrinks.map { it.toDrink() }))
        } else {
            // If cache is empty, refresh and then emit the result
            val refreshResult = refreshDrinksInternal()
            when (refreshResult) {
                is Result.Success -> {
                    val freshDrinks = drinkCacheDao.getAllDrinks().first()
                    emit(Result.Success(freshDrinks.map { it.toDrink() }))
                }

                is Result.Failure -> {
                    emit(refreshResult)
                }
            }
        }
    }.flowOn(dispatchersProvider.io)

    override fun searchDrinks(query: String): Flow<List<Drink>> {
        return drinkCacheDao.searchDrinks(query)
            .map { entities -> entities.map { it.toDrink() } }
            .flowOn(dispatchersProvider.io)
    }

    override suspend fun getDrinkById(drinkId: Int): Drink? {
        return withContext(dispatchersProvider.io) {
            drinkCacheDao.getDrinkById(drinkId)?.toDrink()
        }
    }

    @RequiresExtension(extension = Build.VERSION_CODES.S, version = 7)
    override suspend fun refreshDrinks(): Result<Unit> {
        return withContext(dispatchersProvider.io) {
            refreshDrinksInternal()
        }
    }

    @RequiresExtension(extension = Build.VERSION_CODES.S, version = 7)
    private suspend fun refreshDrinksInternal(): Result<Unit> {
        // Fetch both hot and cold drinks
        val hotResult = ApiManager.execute { apiService.getHotCoffees() }
        val coldResult = ApiManager.execute { apiService.getIcedCoffees() }

        return when {
            hotResult is Result.Success &&
                    coldResult is Result.Success -> {
                val hotEntities = hotResult.data.map { it.toDrinkCacheEntity(isHot = true) }
                val coldEntities = coldResult.data.map { it.toDrinkCacheEntity(isHot = false) }

                // Clear existing data and insert fresh data
                drinkCacheDao.clearAll()
                drinkCacheDao.insertDrinks(hotEntities + coldEntities)

                Result.Success(Unit)
            }

            hotResult is Result.Failure -> {
                Result.Failure(hotResult.exception)
            }

            coldResult is Result.Failure -> {
                Result.Failure(coldResult.exception)
            }

            else -> {
                Result.Failure(Exception("Unexpected refresh result"))
            }
        }
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/repository/impl/OrdersRepositoryImpl.kt">
package com.example.brewbuddy.core.data.repository.impl

import com.example.brewbuddy.core.data.local.dao.OrderDao
import com.example.brewbuddy.core.data.local.entity.OrderEntity
import com.example.brewbuddy.core.data.repository.OrdersRepository
import com.example.brewbuddy.core.data.repository.toOrder
import com.example.brewbuddy.core.data.repository.toOrderItemEntity
import com.example.brewbuddy.core.model.Order
import com.example.brewbuddy.core.model.OrderItem
import com.example.mygraduationapp.core.util.DispatchersProvider
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flowOn
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.withContext
import java.util.UUID
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class OrdersRepositoryImpl @Inject constructor(
    private val orderDao: OrderDao,
    private val dispatchersProvider: DispatchersProvider
) : OrdersRepository {

    override fun getAllOrders(): Flow<List<Order>> {
        return orderDao.getAllOrders()
            .map { orderEntities ->
                orderEntities.map { orderEntity ->
                    val items = orderDao.getOrderItems(orderEntity.orderId)
                    orderEntity.toOrder(items)
                }
            }
            .flowOn(dispatchersProvider.io)
    }

    override suspend fun placeOrder(items: List<OrderItem>): String {
        return withContext(dispatchersProvider.io) {
            val orderId = UUID.randomUUID().toString()
            val totalAmount = items.sumOf { it.price.amount * it.quantity }

            val orderEntity = OrderEntity(
                orderId = orderId,
                placedAt = System.currentTimeMillis(),
                totalAmount = totalAmount
            )

            val orderItemEntities = items.map { it.toOrderItemEntity(orderId) }

            orderDao.insertOrderWithItems(orderEntity, orderItemEntities)
            orderId
        }
    }

    override suspend fun deleteOrder(orderId: String) {
        withContext(dispatchersProvider.io) {
            orderDao.deleteOrder(orderId)
        }
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/repository/OrdersRepository.kt">
package com.example.brewbuddy.core.data.repository

import com.example.brewbuddy.core.model.Order
import com.example.brewbuddy.core.model.OrderItem
import kotlinx.coroutines.flow.Flow

interface OrdersRepository {
    fun getAllOrders(): Flow<List<Order>>
    suspend fun placeOrder(items: List<OrderItem>): String
    suspend fun deleteOrder(orderId: String)
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/data/repository/RepoMappers.kt">
package com.example.brewbuddy.core.data.repository

import com.example.brewbuddy.core.data.local.entity.DrinkCacheEntity
import com.example.brewbuddy.core.data.local.entity.OrderEntity
import com.example.brewbuddy.core.data.local.entity.OrderItemEntity
import com.example.brewbuddy.core.model.Drink
import com.example.brewbuddy.core.model.Money
import com.example.brewbuddy.core.model.Order
import com.example.brewbuddy.core.model.OrderItem
import com.example.brewbuddy.core.util.PriceCatalog

fun DrinkCacheEntity.toDrink(): Drink {
    return Drink(
        id = id,
        name = title,
        description = description,
        ingredients = ingredients,
        imageUrl = imageUrl,
        price = PriceCatalog.getPriceForDrink(title),
        isHot = isHot
    )
}

fun OrderEntity.toOrder(items: List<OrderItemEntity>): Order {
    return Order(
        orderId = orderId,
        items = items.map { it.toOrderItem() },
        totalAmount = Money(totalAmount),
        placedAt = placedAt
    )
}

fun OrderItemEntity.toOrderItem(): OrderItem {
    return OrderItem(
        drinkId = drinkId,
        drinkName = drinkName,
        drinkImage = drinkImage,
        price = Money(price),
        quantity = quantity
    )
}

fun OrderItem.toOrderItemEntity(orderId: String): OrderItemEntity {
    return OrderItemEntity(
        orderId = orderId,
        drinkId = drinkId,
        drinkName = drinkName,
        drinkImage = drinkImage,
        price = price.amount,
        quantity = quantity
    )
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/core/di/AppModule.kt">
package com.example.brewbuddy.core.di

import android.content.Context
import com.example.brewbuddy.core.data.local.BrewBuddyDatabase
import com.example.brewbuddy.core.data.local.dao.DrinkCacheDao
import com.example.brewbuddy.core.data.local.dao.FavoriteDao
import com.example.brewbuddy.core.data.local.dao.OrderDao
import com.example.brewbuddy.core.data.remote.ApiManager
import com.example.brewbuddy.core.prefs.UserPrefs
import com.example.mygraduationapp.core.util.DispatchersProvider
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import kotlinx.coroutines.Dispatchers
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object AppModule {

    @Provides
    @Singleton
    fun provideDatabase(@ApplicationContext context: Context): BrewBuddyDatabase {
        return BrewBuddyDatabase.getInstance(context)
    }

    @Provides
    fun provideDrinkCacheDao(database: BrewBuddyDatabase): DrinkCacheDao {
        return database.drinkCacheDao()
    }

    @Provides
    fun provideFavoriteDao(database: BrewBuddyDatabase): FavoriteDao {
        return database.favoriteDao()
    }

    @Provides
    fun provideOrderDao(database: BrewBuddyDatabase): OrderDao {
        return database.orderDao()
    }

    @Provides
    @Singleton
    fun provideUserPrefs(@ApplicationContext context: Context): UserPrefs {
        return UserPrefs(context)
    }

    @Provides
    @Singleton
    fun provideDispatchersProvider(): DispatchersProvider {
        return object : DispatchersProvider {
            override val main = Dispatchers.Main
            override val io = Dispatchers.IO
            override val default = Dispatchers.Default
            override val unconfined = Dispatchers.Unconfined
        }
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/favorites/ui/adapter/FavoriteAdapter.kt">
package com.example.brewbuddy.feature.favorites.ui.adapter

import android.os.Bundle
import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.brewbuddy.core.model.Drink
import com.example.brewbuddy.databinding.ItemFavoriteBinding

class FavoritesAdapter(
    private val items: MutableList<Drink>,
    private val onRemoveClick: (Drink) -> Unit,
    private val onItemClick: (Drink) -> Unit
) : RecyclerView.Adapter<FavoritesAdapter.FavoritesViewHolder>() {

    inner class FavoritesViewHolder(private val binding: ItemFavoriteBinding) :
        RecyclerView.ViewHolder(binding.root) {

        fun bind(drink: Drink) {
            binding.favName.text = drink.name
            binding.favPrice.text = "$${drink.price}"

            Glide.with(binding.favImage.context)
                .load(drink.imageUrl)
                .placeholder(android.R.drawable.ic_menu_gallery)
                .into(binding.favImage)

            binding.removeFavorite.setOnClickListener {
                onRemoveClick(drink)
            }

            binding.root.setOnClickListener {
                val bundle = Bundle().apply {
                    putInt("drinkId", drink.id)
                }

                onItemClick(drink)
            }

        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): FavoritesViewHolder {
        val binding = ItemFavoriteBinding.inflate(
            LayoutInflater.from(parent.context),
            parent,
            false
        )
        return FavoritesViewHolder(binding)
    }

    override fun onBindViewHolder(holder: FavoritesViewHolder, position: Int) {
        holder.bind(items[position])
    }

    override fun getItemCount() = items.size

    fun updateData(newItems: List<Drink>) {
        items.clear()
        items.addAll(newItems)
        notifyDataSetChanged()
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/favorites/ui/FavoritesFragment.kt">
package com.example.brewbuddy.feature.favorites.ui

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.GridLayoutManager
import com.example.brewbuddy.R
import com.example.brewbuddy.databinding.FragmentFavoritesBinding
import com.example.brewbuddy.feature.favorites.FavoritesViewModel
import com.example.brewbuddy.feature.favorites.ui.adapter.FavoritesAdapter
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch

@AndroidEntryPoint
class FavoritesFragment : Fragment() {

    private var _binding: FragmentFavoritesBinding? = null
    private val binding get() = _binding!!

    private val viewModel: FavoritesViewModel by viewModels()
    private lateinit var adapter: FavoritesAdapter

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentFavoritesBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        adapter = FavoritesAdapter(
            mutableListOf(),
            onRemoveClick = { drink ->
                viewModel.removeFromFavorites(drink.id)
                Toast.makeText(requireContext(), "${drink.name} removed", Toast.LENGTH_SHORT).show()
            },
            onItemClick = { drink ->
                val bundle = Bundle().apply { putInt("drinkId", drink.id) }
                findNavController().navigate(
                    R.id.action_favoritesFragment_to_drinkDetailsFragment,
                    bundle
                )
            }
        )


        binding.rvFavorites.layoutManager = GridLayoutManager(requireContext(), 2)
        binding.rvFavorites.adapter = adapter

        collectFavorites()
    }

    private fun collectFavorites() {
        viewLifecycleOwner.lifecycleScope.launch {
            viewModel.favorites.collectLatest { drinks ->
                if (drinks.isEmpty()) {
                    binding.tvEmpty.visibility = View.VISIBLE
                } else {
                    binding.tvEmpty.visibility = View.GONE
                }
                adapter.updateData(drinks)
            }
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/home/ui/adapter/RecommendationAdapter.kt">
package com.example.brewbuddy.feature.home.ui.adapter

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.brewbuddy.core.model.Drink
import com.example.brewbuddy.databinding.ItemRecommendationBinding

class RecommendationAdapter(
    private val items: MutableList<Drink>,
    private val onItemClick: (Drink) -> Unit
) : RecyclerView.Adapter<RecommendationAdapter.RecommendationViewHolder>() {

    inner class RecommendationViewHolder(
        private val binding: ItemRecommendationBinding
    ) : RecyclerView.ViewHolder(binding.root) {

        fun bind(drink: Drink) {
            binding.recoName.text = drink.name
            binding.recoPrice.text = "$${drink.price}" // format if needed

            Glide.with(binding.recoImage.context)
                .load(drink.imageUrl)
                .placeholder(android.R.drawable.ic_menu_gallery)
                .into(binding.recoImage)

            // Handle click
            binding.root.setOnClickListener { onItemClick(drink) }
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecommendationViewHolder {
        val binding = ItemRecommendationBinding.inflate(
            LayoutInflater.from(parent.context), parent, false
        )
        return RecommendationViewHolder(binding)
    }

    override fun onBindViewHolder(holder: RecommendationViewHolder, position: Int) {
        holder.bind(items[position])
    }

    override fun getItemCount() = items.size

    fun updateData(newItems: List<Drink>) {
        items.clear()
        items.addAll(newItems)
        notifyDataSetChanged()
    }
}
</file>

<file path="app/src/main/java/com/example/brewbuddy/feature/home/ui/HomeFragment.kt">
package com.example.brewbuddy.feature.home.ui

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.brewbuddy.R
import com.example.brewbuddy.core.data.remote.Result
import com.example.brewbuddy.core.model.Drink
import com.example.brewbuddy.databinding.FragmentHomeBinding
import com.example.brewbuddy.feature.home.HomeViewModel
import com.example.brewbuddy.feature.home.ui.adapter.RecommendationAdapter
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch

@AndroidEntryPoint
class HomeFragment : Fragment() {

    private var _binding: FragmentHomeBinding? = null
    private val binding get() = _binding!!

    private val viewModel: HomeViewModel by viewModels()
    private lateinit var adapter: RecommendationAdapter

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentHomeBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.tvGreeting.text = getString(R.string.good_day_emad_rabie)

        // Setup RecyclerView + adapter with click
        adapter = RecommendationAdapter(mutableListOf()) { drink ->
            val bundle = Bundle().apply { putInt("drinkId", drink.id) }
            findNavController().navigate(
                R.id.action_homeFragment_to_drinkDetailsFragment,
                bundle
            )
        }
        binding.rvRecommendations.layoutManager =
            LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)
        binding.rvRecommendations.adapter = adapter


        // Observe drinks from ViewModel
        collectDrinks()

        // Example clicks for other UI elements
        binding.iconGroup.setOnClickListener {
            Toast.makeText(requireContext(), "Menu clicked", Toast.LENGTH_SHORT).show()
        }
        binding.icBell.setOnClickListener {
            Toast.makeText(requireContext(), "Notifications clicked", Toast.LENGTH_SHORT).show()
        }
        binding.cvBestSeller.setOnClickListener {
            Toast.makeText(requireContext(), "Best seller clicked", Toast.LENGTH_SHORT).show()
        }
        binding.cvNewMenu.setOnClickListener {
            Toast.makeText(requireContext(), "New menu clicked", Toast.LENGTH_SHORT).show()
        }
    }

    private fun collectDrinks() {
        viewLifecycleOwner.lifecycleScope.launch {
            viewModel.allDrinks.collectLatest { result ->
                when (result) {
                    is Result.Success -> {
                        val drinks: List<Drink> = result.data
                        adapter.updateData(drinks)
                    }
                    is Result.Failure -> {
                        Toast.makeText(
                            requireContext(),
                            "Error: ${result.exception.message}",
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                    Result.Loading -> {
                        // Could show shimmer/progress bar instead
                    }
                }
            }
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
</file>

<file path="app/src/main/res/values/ids.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <item name="btnIncrease" type="id"/>
    <item name="tvTotalPrice" type="id"/>
    <item name="tvItemsCount" type="id"/>
    <item name="etSearchLayout" type="id">etSearchLayout</item>
    <item name="etSearch" type="id">etSearch</item>
    <item name="toggle" type="id">toggle</item>
    <item name="offer" type="id">offer</item>
    <item name="chipIced" type="id">chipIced</item>
    <item name="progress" type="id">progress</item>
    <item name="tvError" type="id">tvError</item>
    <item name="rvMenu" type="id">rvMenu</item>
    <item name="chipHot" type="id">chipHot</item>
    <item name="action_favoritesFragment_to_drinkDetailsFragment" type="id" />
    <item name="action_homeFragment_to_drinkDetailsFragment" type="id">
        action_homeFragment_to_drinkDetailsFragment
    </item>
</resources>
</file>

<file path="README.md">
# BrewBuddy 
is a mobile application that simulates a modern coffee shop ordering experience. It integrates online data (fetched dynamically from the [Fake Coffee API]) with local storage features to create a hybrid app that works both online and offline.
---
## Branch Strategy

We are following a **Git branching strategy** to manage teamwork:

- **main** → Final stable code  
- **dev** → Shared development branch (where features are merged)  
- **feature/*** → Each team member’s task branch  

---
# Project Structure – BrewBuddy Core 

## core/data/local  
Handles **Room Database** (local storage).  

- **dao/**  
  - `DrinkCacheDao.kt` → Access cached drinks in DB.  
  - `FavoriteDao.kt` → Access favorites in DB.  
  - `OrderDao.kt` → Access orders in DB.  

- **entity/**  
  - `DrinkCacheEntity.kt` → Entity for cached drinks.  
  - `FavoriteEntity.kt` → Entity for saved favorites.  
  - `OrderEntity.kt` → Entity for an order (ID, date, etc.).  
  - `OrderItemEntity.kt` → Entity for items inside an order.  

- `brewbuddyDatabase.kt` → Room database setup (connects DAOs + entities).  
- `LocalTypeConverters.kt` → Converts custom types (lists, objects) for Room.  

---

## core/data/remote  
Handles **API calls** (online data).  

- **dto/**  
  - `CoffeeDto.kt` → Data model for coffee items from API.  
  - `DtoMappers.kt` → Maps API DTOs → app models (`Drink`).  

- `CoffeeApiService.kt` → Retrofit API endpoints (hot/iced coffee).  
- `NetworkModule.kt` → Provides Retrofit instance + API service.  

---

## core/repository  
The **bridge** between Data (API/DB) and UI.  

- **impl/**  
  - `DrinkRepositoryImpl.kt` → Drinks logic (API + cache).  
  - `FavoritesRepositoryImpl.kt` → Favorites logic (local DB).  
  - `OrdersRepositoryImpl.kt` → Orders logic (local DB).  

- `Result.kt` → Wrapper for success/error results.  
- `DrinkRepository.kt` → Contract for drinks data.  
- `FavoritesRepository.kt` → Contract for favorites data.  
- `OrdersRepository.kt` → Contract for orders data.  
- `RepoMappers.kt` → Maps Entities ↔ Models (DB ↔ domain).  

---

## di (Dependency Injection)  
- `AppModule.kt` → Provides app-wide dependencies (Room, Retrofit, etc.).  
- `RepositoryModule.kt` → Provides repositories (DrinkRepo, FavoritesRepo, OrdersRepo).  

---

## model (Domain Models)  
- `Drink.kt` → Domain model for a drink.  
- `Money.kt` → Handles prices/currency.  
- `Order.kt` → Domain model for an order.  
- `OrderItem.kt` → Domain model for an item inside an order.  

---

## prefs (User Preferences)  
- `UserPrefs.kt` → Saves and retrieves user name (SharedPreferences).  

---

## util (Helpers & Utilities)  
- `DateFormatters.kt` → Formats dates/times for orders.  
- `DispatchersProvider.kt` → Provides coroutine dispatchers (IO/Main).  
- `Extensions.kt` → Kotlin extension functions (helper methods).  
- `PriceCatalog.kt` → Static price list for drinks (since API has no price).  
---

## Tasks Division
---
## Project Coordination

- Repository setup, README, branch strategy (`dev` / `feature/*` / `master`), and task distribution were handled by **Shorouk Saffan**.
---
### Task 1: Core
- `core/`

---

### Task 2: Base Layouts by ***Emad Rabie***
- `activity_main.xml`  
- `fragment_home.xml`  
- `fragment_menu.xml`  
- `fragment_orders.xml`  
- `fragment_favorites.xml`  

---

### Task 3: RecyclerView Items by ***Mohamed Ashraf***
- `item_coffee.xml`  
- `item_drink.xml`  
- `item_favorite.xml`  
- `item_order.xml`  
- `item_recommendation.xml`  

---

### Task 4: Extra Layouts->Mariam Mohamed
- `dialog_user_name.xml`  
- `fragment_drink_details.xml`  
- `fragment_item_detail.xml`  
- `layout_empty_state.xml`  
- `layout_progress.xml`  

---

### Task 5: Navigation + Main "Ahmed Hashem"
- `menu/bottom_nav_menu.xml`  
- `navigation/nav_graph.xml`  
- `MainActivity.kt`  

---

### Bahy Mohy - Task 6: Features – Dialog + Menu
- `feature/dialog/`  
- `feature/menu/`  

---

### Task 7: Features – Favorites + Home -> Mohamed Mostafa
- `feature/favourites/`  
- `feature/home/`  

---
### Task 8: Features – Orders + Service
- `feature/order/`  
- `service/`  
- `BrewBuddy.kt`
</file>

</files>
